{
  "version": 3,
  "sources": ["../../glsl-token-depth/index.js", "../../glsl-token-scope/index.js", "../../glsl-token-properties/index.js", "../../glsl-token-assignments/assignments.js", "../../glsl-token-assignments/ignored.js", "../../glsl-token-assignments/index.js", "../../glsl-token-descope/index.js", "../../lamina/index.js", "../../lamina/node_modules/three-custom-shader-material/vanilla.js"],
  "sourcesContent": ["module.exports = getTokenDepth\n\nfunction getTokenDepth(tokens) {\n  var loop  = false\n  var depth = 0\n\n  for (var i = 0; i < tokens.length; i++) {\n    loop = loop || (tokens[i].type === 'keyword' && (\n      tokens[i].data === 'for'\n    ))\n\n    switch (tokens[i].data) {\n      case '(': tokens[i].depth = loop ? depth++ : depth; break\n      case '{': tokens[i].depth = loop ? depth : depth++; loop = false; break\n      case '}': tokens[i].depth = --depth; break\n      default:  tokens[i].depth = depth\n    }\n  }\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    var index = i + 1\n    if (token.type !== 'ident' && token.type !== 'keyword') continue\n    skipArrayArguments()\n    if (tokens[index].type !== 'ident') continue\n    skipArrayArguments()\n    index++\n    if (tokens[index].data !== '(') continue\n\n    while (tokens[index] && tokens[index].data !== ';' && tokens[index].data !== '{') {\n      tokens[index++].depth++\n    }\n    if (tokens[index] && tokens[index].data === '{') tokens[index].depth++\n  }\n\n  return tokens\n\n  function skipArrayArguments() {\n    while (tokens[index] && (\n      tokens[index].type === 'whitespace' ||\n      tokens[index].data === '[' ||\n      tokens[index].data === ']' ||\n      tokens[index].data === 'integer'\n    )) index++\n  }\n}\n", "module.exports = tokenScope\n\nfunction tokenScope(tokens) {\n  var stack  = [0]\n  var inc    = stack[0]\n  var ldepth = 0\n\n  if (!tokens || !tokens.length) return tokens\n  if (!('depth' in tokens[0])) {\n    throw new Error('glsl-token-scope: No scope depth defined on tokens! Use glsl-token-depth on these tokens first')\n  }\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    var depth = token.depth\n\n    if (depth > ldepth) {\n      stack.push(++inc)\n    } else\n    if (depth < ldepth) {\n      stack.splice(-1, 1)\n    }\n\n    token.scope = stack[stack.length - 1]\n    token.stack = stack.slice()\n    ldepth = token.depth\n  }\n\n  return tokens\n}\n", "module.exports = properties\n\nfunction properties(tokens) {\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    token.property = false\n\n    if (token.type !== 'ident') continue\n\n    var j = i\n    while (tokens[--j] && tokens[j].type === 'whitespace');\n    if (!tokens[j]) continue\n    if (tokens[j].type !== 'operator') continue\n    if (tokens[j].data !== '.') continue\n\n    token.property = true\n  }\n\n  return tokens\n}\n", "module.exports = {\n    '<<=': true\n  , '>>=': true\n  , '++': true\n  , '--': true\n  , '+=': true\n  , '-=': true\n  , '*=': true\n  , '/=': true\n  , '%=': true\n  , '&=': true\n  , '^=': true\n  , '|=': true\n  , '=': true\n}\n", "module.exports = {\n    'precision': true\n  , 'highp': true\n  , 'mediump': true\n  , 'lowp': true\n  , 'attribute': true\n  , 'const': true\n  , 'uniform': true\n  , 'varying': true\n  , 'break': true\n  , 'continue': true\n  , 'do': true\n  , 'for': true\n  , 'while': true\n  , 'if': true\n  , 'else': true\n  , 'in': true\n  , 'out': true\n  , 'inout': true\n  , 'true': true\n  , 'false': true\n  , 'return': true\n}\n", "var assignments = require('./assignments')\nvar ignoredKeywords = require('./ignored')\n\nmodule.exports = assigns\n\n// Here be dragons. Apologies in advance for the hairy code!\nfunction assigns(tokens) {\n  var idx = 0\n\n  // Determine if a value has been assigned, e.g.\n  // x = 1.0;\n  // float x = 1.0;\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    var type  = token.type\n\n    token.assignment = false\n    token.declaration = false\n    if (type !== 'ident' && type !== 'builtin') continue\n    idx = i + 1\n\n    skipWhitespace(+1)\n    if (tokens[idx].type !== 'operator') continue\n    if (!assignments[tokens[idx].data]) continue\n    token.assignment = true\n  }\n\n  // Determine if a value is being defined, e.g.\n  // float x;\n  // float x, y, z;\n  // float x, y = vec3(sin(1.0 + 3.0)), z;\n  // float[3][2] x, y = vec3(sin(1.0 + 3.0)), z;\n  // float[][2] x, y = vec3(sin(1.0 + 3.0)), z;\n  // float x[2], y = vec3(sin(1.0 + 3.0)), z[4];\n  // float x(float y, float z) {};\n  // float x(float y[2], Thing[3] z) {};\n  // Thing x[2], y = Another(sin(1.0 + 3.0)), z[4];\n  for (var i = 0; i < tokens.length; i++) {\n    var datatype = tokens[i]\n    var type     = datatype.type\n    var data     = datatype.data\n\n    datatype.declaration = false\n\n    if (type === 'keyword') {\n      if (ignoredKeywords[data]) continue\n    } else\n    if (type !== 'ident') continue\n\n    idx = i + 1\n\n    skipArrayDimensions()\n    if (tokens[idx].type !== 'ident') continue\n    tokens[idx++].declaration = true\n    skipArrayDimensions()\n\n    // Function arguments/parameters\n    if (tokens[idx].data === '(') {\n      idx++\n\n      skipWhitespace(+1)\n      while (tokens[idx] && tokens[idx].data !== ')') {\n        if (tokens[idx].type !== 'keyword' && tokens[idx].type !== 'ident') break\n        idx++\n        skipWhitespace(+1)\n        if (tokens[idx].type !== 'ident') continue\n        tokens[idx++].declaration = true\n        skipWhitespace(+1)\n        skipArrayDimensions()\n        skipWhitespace(+1)\n        if (tokens[idx].data !== ',') continue\n        idx++\n        skipWhitespace(+1)\n      }\n\n      i = idx\n      continue\n    }\n\n    // Declaration Lists\n    while (tokens[idx] && tokens[idx].data !== ';') {\n      if (tokens[idx].data === ',') {\n        idx++\n        skipWhitespace(+1)\n        if (tokens[idx].declaration = tokens[idx].type === 'ident') idx++\n      } else {\n        skipWhitespace(+1)\n        skipParens()\n        skipWhitespace(+1)\n        idx++\n      }\n    }\n\n    i = idx\n  }\n\n  // Handle struct declarations:\n  // struct declaration {\n  //   float x, y, z;\n  //   Other w;\n  // } declaration;\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    if (token.type !== 'keyword') continue\n    if (token.data !== 'struct') continue\n    idx = i + 1\n    skipWhitespace(+1)\n    if (tokens[idx].type !== 'ident') continue\n\n    idx++\n    skipWhitespace(+1)\n    if (tokens[idx++].data !== '{') continue\n    skipWhitespace(+1)\n\n    while (tokens[idx].type === 'ident' || tokens[idx].type === 'keyword') {\n      do {\n        idx++\n        skipWhitespace(+1)\n        tokens[idx].structMember = true\n        tokens[idx].declaration = false\n        idx++\n        skipArrayDimensions()\n      } while (tokens[idx].data === ',')\n\n      if (tokens[idx].data === ';') idx++\n      skipWhitespace()\n    }\n\n    idx++\n    skipWhitespace(+1)\n    if (tokens[idx].type !== 'ident') continue\n    tokens[idx].declaration = true\n    skipWhitespace(+1)\n\n    while (tokens[++idx].data === ',') {\n      skipWhitespace(+1)\n      idx++\n      skipWhitespace(+1)\n      if (tokens[idx].type === 'ident') tokens[idx].declaration = true\n      skipWhitespace(+1)\n    }\n  }\n\n  return tokens\n\n  function skipWhitespace(n) {\n    while (tokens[idx] && tokens[idx].type === 'whitespace') idx++\n  }\n\n  function skipArrayDimensions() {\n    while (tokens[idx] && (\n         tokens[idx].type === 'integer'\n      || tokens[idx].data === '['\n      || tokens[idx].data === ']'\n      || tokens[idx].type === 'whitespace'\n    )) idx++\n  }\n\n  function skipParens() {\n    if (!tokens[idx]) return\n    if (tokens[idx].data !== '(') return\n    var depth = 0\n    var a = idx\n    do {\n      if (tokens[idx].data === ';') break\n      if (tokens[idx].data === '(') depth++\n      if (tokens[idx].data === ')') depth--\n    } while(depth && tokens[++idx])\n  }\n}\n", "module.exports = glslTokenDescope\n\nfunction glslTokenDescope(tokens, rename) {\n  require('glsl-token-depth')(tokens)\n  require('glsl-token-scope')(tokens)\n  require('glsl-token-properties')(tokens)\n  require('glsl-token-assignments')(tokens)\n\n  var scope   = getScope(tokens)\n  var renamer = rename || defaultRenamer()\n  var map     = {}\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    var stack = token.stack\n    var name  = token.data\n\n    token.descoped = false\n\n    if (token.type !== 'ident') continue\n    if (token.property) continue\n    if (token.structMember) continue\n\n    var bound = false\n\n    for (var j = stack.length - 1; j >= 0; j--) {\n      var s = scope[stack[j]]\n      if (!s) continue\n      if (!s[name]) continue\n\n      bound = true\n\n      // exit if declaration not in top-level scope\n      if (j) break\n\n      token.descoped = token.data\n      token.data = map[name] = map[name] || renamer(name, token) || token.data\n    }\n\n    // Handle unbound variables, i.e. ones not defined anywhere\n    // in the shader source but still used.\n    if (!bound) {\n      token.descoped = token.data\n      token.data = map[name] = map[name] || renamer(name, token) || token.data\n    }\n  }\n\n  return tokens\n}\n\nfunction defaultRenamer() {\n  var k = 0\n\n  return function rename(name) {\n    return name + '_' + (k++).toString(36)\n  }\n}\n\nfunction getScope(tokens) {\n  var scope = {}\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    if (token.declaration) {\n      scope[token.scope] = scope[token.scope] || {}\n      scope[token.scope][token.data] = token\n    }\n  }\n\n  return scope\n}\n", "import _extends from '@babel/runtime/helpers/esm/extends';\nimport { extend } from '@react-three/fiber';\nimport React, { useImperativeHandle, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { Color as Color$2, Vector3, Vector2, Vector4, Matrix3, Matrix4, Texture as Texture$2, MathUtils, TextureLoader } from 'three';\nimport tokenize from 'glsl-tokenizer';\nimport descope from 'glsl-token-descope';\nimport stringify from 'glsl-token-string';\nimport tokenFunctions from 'glsl-token-functions';\nimport CustomShaderMaterial from 'three-custom-shader-material/vanilla';\nimport { createRoot } from 'react-dom/client';\nimport { useCreateStore, useControls, button, LevaPanel } from 'leva';\n\nfunction getUniform(value) {\n  if (typeof value === 'string') {\n    return new Color$2(value).convertLinearToSRGB();\n  }\n\n  return value;\n}\nfunction getSpecialParameters(label) {\n  switch (label) {\n    case 'alpha':\n      return {\n        min: 0,\n        max: 1\n      };\n\n    case 'scale':\n      return {\n        min: 0\n      };\n\n    case 'map':\n      return {\n        image: undefined\n      };\n\n    default:\n      return {};\n  }\n}\nfunction getLayerMaterialArgs({\n  color,\n  alpha,\n  lighting,\n  name,\n  ...rest\n} = {}) {\n  return [{\n    color,\n    alpha,\n    lighting,\n    name\n  }, rest];\n}\nfunction isSerializableType(prop) {\n  return prop instanceof Vector3 || prop instanceof Vector2 || prop instanceof Vector4 || prop instanceof Matrix3 || prop instanceof Matrix4;\n}\nfunction serializeProp(prop) {\n  if (isSerializableType(prop)) {\n    return prop.toArray();\n  } else if (prop instanceof Color$2) {\n    return '#' + prop.clone().convertLinearToSRGB().getHexString();\n  } else if (prop instanceof Texture$2) {\n    return prop.image.src;\n  }\n\n  return prop;\n}\n\nconst BlendModes = {\n  normal: 'normal',\n  add: 'add',\n  subtract: 'subtract',\n  multiply: 'multiply',\n  lighten: 'lighten',\n  darken: 'darken',\n  divide: 'divide',\n  overlay: 'overlay',\n  screen: 'screen',\n  softlight: 'softlight',\n  negation: 'negation',\n  reflect: 'reflect'\n};\nconst NoiseTypes = {\n  perlin: 'perlin',\n  simplex: 'simplex',\n  cell: 'cell',\n  curl: 'curl',\n  white: 'white'\n};\nconst MappingTypes = {\n  local: 'local',\n  world: 'world',\n  uv: 'uv'\n};\nconst ShadingTypes = {\n  phong: THREE.MeshPhongMaterial,\n  physical: THREE.MeshPhysicalMaterial,\n  toon: THREE.MeshToonMaterial,\n  basic: THREE.MeshBasicMaterial,\n  lambert: THREE.MeshLambertMaterial,\n  standard: THREE.MeshStandardMaterial\n};\n\nclass Abstract {\n  constructor(c, props, onParse) {\n    this.uuid = MathUtils.generateUUID().replace(/-/g, '_');\n    this.name = 'LayerMaterial';\n    this.mode = 'normal';\n    this.visible = true;\n    const defaults = Object.getOwnPropertyNames(c).filter(e => e.startsWith('u_'));\n    const uniforms = defaults.reduce((a, v) => {\n      var _Object$getOwnPropert;\n\n      let value = (_Object$getOwnPropert = Object.getOwnPropertyDescriptor(c, v)) == null ? void 0 : _Object$getOwnPropert.value;\n      if (isSerializableType(value) || value instanceof Color$2) value = value.clone();\n      return { ...a,\n        [v.slice(1)]: value\n      };\n    }, {});\n\n    for (const key in uniforms) {\n      const propName = key.split('_')[1];\n      if ((props == null ? void 0 : props[propName]) !== undefined) uniforms[key] = props[propName];\n    }\n\n    if (props) {\n      Object.keys(props).map(key => {\n        if (props[key] !== undefined) {\n          // @ts-ignore\n          this[key] = props[key];\n        }\n      });\n    }\n\n    this.uniforms = {};\n    this.schema = [];\n    const properties = {};\n    Object.keys(uniforms).map(key => {\n      const propName = key.split('_')[1];\n      this.uniforms[`u_${this.uuid}_${propName}`] = {\n        value: getUniform(uniforms[key])\n      };\n      this.schema.push({\n        value: uniforms[key],\n        label: propName\n      });\n      properties[propName] = {\n        set: v => {\n          this.uniforms[`u_${this.uuid}_${propName}`].value = getUniform(v);\n        },\n        get: () => {\n          return this.uniforms[`u_${this.uuid}_${propName}`].value;\n        }\n      };\n    });\n    if (props != null && props.name) this.name = props.name;\n    if (props != null && props.mode) this.mode = props.mode;\n    if (props != null && props.visible) this.visible = props.visible;\n    Object.defineProperties(this, properties);\n    this.vertexShader = '';\n    this.fragmentShader = '';\n    this.vertexVariables = '';\n    this.fragmentVariables = '';\n    this.onParse = onParse;\n    this.buildShaders(c); // Remove Name field from Debugger until a way to\n    // rename Leva folders is found\n    // this.schema.push({\n    //   value: this.name,\n    //   label: 'name',\n    // })\n\n    this.schema.push({\n      value: this.mode,\n      label: 'mode',\n      options: Object.values(BlendModes)\n    });\n    this.schema.push({\n      value: this.visible,\n      label: 'visible'\n    });\n  }\n\n  buildShaders(constructor) {\n    var _this$onParse;\n\n    const shaders = Object.getOwnPropertyNames(constructor).filter(e => e === 'fragmentShader' || e === 'vertexShader').reduce((a, v) => {\n      var _Object$getOwnPropert2;\n\n      return { ...a,\n        [v]: (_Object$getOwnPropert2 = Object.getOwnPropertyDescriptor(constructor, v)) == null ? void 0 : _Object$getOwnPropert2.value\n      };\n    }, {});\n    const tokens = {\n      vert: tokenize(shaders.vertexShader || ''),\n      frag: tokenize(shaders.fragmentShader || '')\n    };\n    const descoped = {\n      vert: descope(tokens.vert, this.renameTokens.bind(this)),\n      frag: descope(tokens.frag, this.renameTokens.bind(this))\n    };\n    const funcs = {\n      vert: tokenFunctions(descoped.vert),\n      frag: tokenFunctions(descoped.frag)\n    };\n    const mainIndex = {\n      vert: funcs.vert.map(e => {\n        return e.name;\n      }).indexOf('main'),\n      frag: funcs.frag.map(e => {\n        return e.name;\n      }).indexOf('main')\n    };\n    const variables = {\n      vert: mainIndex.vert >= 0 ? stringify(descoped.vert.slice(0, funcs.vert[mainIndex.vert].outer[0])) : '',\n      frag: mainIndex.frag >= 0 ? stringify(descoped.frag.slice(0, funcs.frag[mainIndex.frag].outer[0])) : ''\n    };\n    const funcBodies = {\n      vert: mainIndex.vert >= 0 ? this.getShaderFromIndex(descoped.vert, funcs.vert[mainIndex.vert].body) : '',\n      frag: mainIndex.frag >= 0 ? this.getShaderFromIndex(descoped.frag, funcs.frag[mainIndex.frag].body) : ''\n    };\n    this.vertexShader = this.processFinal(funcBodies.vert, true);\n    this.fragmentShader = this.processFinal(funcBodies.frag);\n    this.vertexVariables = variables.vert;\n    this.fragmentVariables = variables.frag;\n    (_this$onParse = this.onParse) == null ? void 0 : _this$onParse.call(this, this);\n    this.schema = this.schema.filter((value, index) => {\n      const _value = value.label;\n      return index === this.schema.findIndex(obj => {\n        return obj.label === _value;\n      });\n    });\n  }\n\n  renameTokens(name) {\n    if (name.startsWith('u_')) {\n      const slice = name.slice(2);\n      return `u_${this.uuid}_${slice}`;\n    } else if (name.startsWith('v_')) {\n      const slice = name.slice(2);\n      return `v_${this.uuid}_${slice}`;\n    } else if (name.startsWith('f_')) {\n      const slice = name.slice(2);\n      return `f_${this.uuid}_${slice}`;\n    } else {\n      return name;\n    }\n  }\n\n  processFinal(shader, isVertex) {\n    const s = shader.replace(/\\sf_/gm, ` f_${this.uuid}_`).replace(/\\(f_/gm, `(f_${this.uuid}_`);\n    const returnValue = s.match(/^.*return.*$/gm);\n    let sReplaced = s.replace(/^.*return.*$/gm, '');\n\n    if (returnValue != null && returnValue[0]) {\n      const returnVariable = returnValue[0].replace('return', '').trim().replace(';', '');\n      const blendMode = this.getBlendMode(returnVariable, 'lamina_finalColor');\n      sReplaced += isVertex ? `lamina_finalPosition = ${returnVariable};` : `lamina_finalColor = ${blendMode};`;\n    }\n\n    return sReplaced;\n  }\n\n  getShaderFromIndex(tokens, index) {\n    return stringify(tokens.slice(index[0], index[1]));\n  }\n\n  getBlendMode(b, a) {\n    switch (this.mode) {\n      default:\n      case 'normal':\n        return `lamina_blend_alpha(${a}, ${b}, ${b}.a)`;\n\n      case 'add':\n        return `lamina_blend_add(${a}, ${b}, ${b}.a)`;\n\n      case 'subtract':\n        return `lamina_blend_subtract(${a}, ${b}, ${b}.a)`;\n\n      case 'multiply':\n        return `lamina_blend_multiply(${a}, ${b}, ${b}.a)`;\n\n      case 'lighten':\n        return `lamina_blend_lighten(${a}, ${b}, ${b}.a)`;\n\n      case 'darken':\n        return `lamina_blend_darken(${a}, ${b}, ${b}.a)`;\n\n      case 'divide':\n        return `lamina_blend_divide(${a}, ${b}, ${b}.a)`;\n\n      case 'overlay':\n        return `lamina_blend_overlay(${a}, ${b}, ${b}.a)`;\n\n      case 'screen':\n        return `lamina_blend_screen(${a}, ${b}, ${b}.a)`;\n\n      case 'softlight':\n        return `lamina_blend_softlight(${a}, ${b}, ${b}.a)`;\n\n      case 'reflect':\n        return `lamina_blend_reflect(${a}, ${b}, ${b}.a)`;\n\n      case 'negation':\n        return `lamina_blend_negation(${a}, ${b}, ${b}.a)`;\n    }\n  }\n\n  getSchema() {\n    const latestSchema = this.schema.map(({\n      label,\n      options,\n      ...rest\n    }) => {\n      return {\n        label,\n        options,\n        ...getSpecialParameters(label),\n        ...rest,\n        // @ts-ignore\n        value: serializeProp(this[label])\n      };\n    });\n    return latestSchema;\n  }\n\n  serialize() {\n    const name = this.constructor.name.split('$')[0];\n    let nonUniformPropKeys = Object.keys(this);\n    nonUniformPropKeys = nonUniformPropKeys.filter(e => !['uuid', 'uniforms', 'schema', 'fragmentShader', 'vertexShader', 'fragmentVariables', 'vertexVariables', 'attribs', 'events', '__r3f', 'onParse'].includes(e));\n    const nonUniformProps = {};\n    nonUniformPropKeys.forEach(k => {\n      // @ts-ignore\n      nonUniformProps[k] = this[k];\n    });\n    const props = {};\n\n    for (const key in this.uniforms) {\n      const name = key.replace(`u_${this.uuid}_`, '');\n      props[name] = serializeProp(this.uniforms[key].value);\n    }\n\n    return {\n      constructor: name,\n      properties: { ...props,\n        ...nonUniformProps\n      }\n    };\n  }\n\n}\n\nclass Depth$1 extends Abstract {\n  constructor(props) {\n    super(Depth$1, {\n      name: 'Depth',\n      ...props\n    }, self => {\n      self.schema.push({\n        value: self.mapping,\n        label: 'mapping',\n        options: ['vector', 'world', 'camera']\n      });\n      const mapping = Depth$1.getMapping(self.uuid, self.mapping);\n      self.fragmentShader = self.fragmentShader.replace('lamina_mapping_template', mapping);\n    });\n    this.mapping = 'vector';\n  }\n\n  static getMapping(uuid, type) {\n    switch (type) {\n      default:\n      case 'vector':\n        return `length(v_${uuid}_worldPosition - u_${uuid}_origin)`;\n\n      case 'world':\n        return `length(v_${uuid}_position - vec3(0.))`;\n\n      case 'camera':\n        return `length(v_${uuid}_worldPosition - cameraPosition)`;\n    }\n  }\n\n}\nDepth$1.u_near = 2;\nDepth$1.u_far = 10;\nDepth$1.u_origin = new Vector3(0, 0, 0);\nDepth$1.u_colorA = 'white';\nDepth$1.u_colorB = 'black';\nDepth$1.u_alpha = 1;\nDepth$1.vertexShader = `\n  varying vec3 v_worldPosition;\n  varying vec3 v_position;\n\n  void main() {\n    v_worldPosition = (vec4(position, 1.0) * modelMatrix).xyz;\n    v_position = position;\n  }\n  `;\nDepth$1.fragmentShader = `   \n    uniform float u_alpha;\n    uniform float u_near;\n    uniform float u_far;\n    uniform float u_isVector;\n    uniform vec3 u_origin;\n    uniform vec3 u_colorA;\n    uniform vec3 u_colorB;\n\n    varying vec3 v_worldPosition;\n    varying vec3 v_position;\n\n    void main() {\n      float f_dist = lamina_mapping_template;\n      float f_depth = (f_dist - u_near) / (u_far - u_near);\n\t\t\tvec3 f_depthColor =  mix(u_colorB, u_colorA, 1.0 - clamp(f_depth, 0., 1.));\n  \n  \n      return vec4(f_depthColor, u_alpha);\n    }\n  `;\n\nclass Color$1 extends Abstract {\n  constructor(props) {\n    super(Color$1, {\n      name: 'Color',\n      ...props\n    });\n  }\n\n}\nColor$1.u_color = 'red';\nColor$1.u_alpha = 1;\nColor$1.fragmentShader = `   \n    uniform vec3 u_color;\n    uniform float u_alpha;\n\n    void main() {\n      return vec4(u_color, u_alpha);\n    }\n  `;\n\nclass Noise$1 extends Abstract {\n  constructor(props) {\n    super(Noise$1, {\n      name: 'noise',\n      ...props\n    }, self => {\n      self.schema.push({\n        value: self.type,\n        label: 'type',\n        options: Object.values(NoiseTypes)\n      });\n      self.schema.push({\n        value: self.mapping,\n        label: 'mapping',\n        options: Object.values(MappingTypes)\n      });\n      const noiseFunc = Noise$1.getNoiseFunction(self.type);\n      const mapping = Noise$1.getMapping(self.mapping);\n      self.vertexShader = self.vertexShader.replace('lamina_mapping_template', mapping);\n      self.fragmentShader = self.fragmentShader.replace('lamina_noise_template', noiseFunc);\n    });\n    this.type = 'perlin';\n    this.mapping = 'local';\n  }\n\n  static getNoiseFunction(type) {\n    switch (type) {\n      default:\n      case 'perlin':\n        return `lamina_noise_perlin`;\n\n      case 'simplex':\n        return `lamina_noise_simplex`;\n\n      case 'cell':\n        return `lamina_noise_worley`;\n\n      case 'white':\n        return `lamina_noise_white`;\n\n      case 'curl':\n        return `lamina_noise_swirl`;\n    }\n  }\n\n  static getMapping(type) {\n    switch (type) {\n      default:\n      case 'local':\n        return `position`;\n\n      case 'world':\n        return `(modelMatrix * vec4(position,1.0)).xyz`;\n\n      case 'uv':\n        return `vec3(uv, 0.)`;\n    }\n  }\n\n}\nNoise$1.u_colorA = '#666666';\nNoise$1.u_colorB = '#666666';\nNoise$1.u_colorC = '#FFFFFF';\nNoise$1.u_colorD = '#FFFFFF';\nNoise$1.u_alpha = 1;\nNoise$1.u_scale = 1;\nNoise$1.u_offset = new Vector3(0, 0, 0);\nNoise$1.vertexShader = `\n    varying vec3 v_position;\n\n    void main() {\n        v_position = lamina_mapping_template;\n    }\n  `;\nNoise$1.fragmentShader = `   \n    uniform vec3 u_colorA;\n    uniform vec3 u_colorB;\n    uniform vec3 u_colorC;\n    uniform vec3 u_colorD;\n    uniform vec3 u_offset;\n\n    uniform float u_alpha;\n    uniform float u_scale;\n\n    varying vec3 v_position;\n\n\n    void main() {\n        float f_n = lamina_noise_template((v_position + u_offset) * u_scale);\n\n        float f_step1 = 0.;\n        float f_step2 = 0.2;\n        float f_step3 = 0.6;\n        float f_step4 = 1.;\n\n        vec3 f_color = mix(u_colorA, u_colorB, smoothstep(f_step1, f_step2, f_n));\n        f_color = mix(f_color, u_colorC, smoothstep(f_step2, f_step3, f_n));\n        f_color = mix(f_color, u_colorD, smoothstep(f_step3, f_step4, f_n));\n\n        return vec4(f_color, u_alpha);\n    }\n  `;\n\nclass Fresnel$1 extends Abstract {\n  constructor(props) {\n    super(Fresnel$1, {\n      name: 'Fresnel',\n      ...props\n    });\n  }\n\n}\nFresnel$1.u_color = 'white';\nFresnel$1.u_alpha = 1;\nFresnel$1.u_bias = 0;\nFresnel$1.u_intensity = 1;\nFresnel$1.u_power = 2;\nFresnel$1.u_factor = 1;\nFresnel$1.vertexShader = `\n    varying vec3 v_worldPosition;\n    varying vec3 v_worldNormal;\n\n    void main() {\n        v_worldPosition = vec3(-viewMatrix[0][2], -viewMatrix[1][2], -viewMatrix[2][2]);\n        v_worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\n        \n    }\n  `;\nFresnel$1.fragmentShader = `   \n    uniform vec3 u_color;\n    uniform float u_alpha;\n    uniform float u_bias;\n    uniform float u_intensity;\n    uniform float u_power;\n    uniform float u_factor;\n\n    varying vec3 v_worldPosition;\n    varying vec3 v_worldNormal;\n\n    void main() {\n        float f_a = (u_factor  + dot(v_worldPosition, v_worldNormal));\n        float f_fresnel = u_bias + u_intensity * pow(abs(f_a), u_power);\n\n        f_fresnel = clamp(f_fresnel, 0.0, 1.0);\n        return vec4(f_fresnel * u_color, u_alpha);\n    }\n  `;\n\nclass Gradient$1 extends Abstract {\n  constructor(props) {\n    super(Gradient$1, {\n      name: 'Gradient',\n      ...props\n    }, self => {\n      self.schema.push({\n        value: self.axes,\n        label: 'axes',\n        options: ['x', 'y', 'z']\n      });\n      self.schema.push({\n        value: self.mapping,\n        label: 'mapping',\n        options: Object.values(MappingTypes)\n      });\n      const mapping = Gradient$1.getMapping(self.mapping);\n      self.vertexShader = self.vertexShader.replace('lamina_mapping_template', mapping || 'local');\n      self.fragmentShader = self.fragmentShader.replace('axes_template', self.axes || 'x');\n    });\n    this.axes = 'x';\n    this.mapping = 'local';\n  }\n\n  static getMapping(type) {\n    switch (type) {\n      default:\n      case 'local':\n        return `position`;\n\n      case 'world':\n        return `(modelMatrix * vec4(position,1.0)).xyz`;\n\n      case 'uv':\n        return `vec3(uv, 0.)`;\n    }\n  }\n\n}\nGradient$1.u_colorA = 'white';\nGradient$1.u_colorB = 'black';\nGradient$1.u_alpha = 1;\nGradient$1.u_start = 1;\nGradient$1.u_end = -1;\nGradient$1.u_contrast = 1;\nGradient$1.vertexShader = `\n\t\tvarying vec3 v_position;\n\n\t\tvod main() {\n      v_position = lamina_mapping_template;\n\t\t}\n  `;\nGradient$1.fragmentShader = `   \n    uniform vec3 u_colorA;\n    uniform vec3 u_colorB;\n    uniform vec3 u_axis;\n    uniform float u_alpha;\n    uniform float u_start;\n    uniform float u_end;\n    uniform float u_contrast;\n\n\t\tvarying vec3 v_position;\n\n    void main() {\n\n      float f_step = smoothstep(u_start, u_end, v_position.axes_template * u_contrast);\n      vec3 f_color = mix(u_colorA, u_colorB, f_step);\n\n      return vec4(f_color, u_alpha);\n    }\n  `;\n\nclass Matcap$1 extends Abstract {\n  constructor(props) {\n    super(Matcap$1, {\n      name: \"Matcap\",\n      ...props\n    });\n  }\n\n}\nMatcap$1.u_alpha = 1;\nMatcap$1.u_map = undefined;\nMatcap$1.vertexShader = `\n    varying vec3 v_position;\n    varying vec3 v_normal;\n    \n    void main() {\n      v_position = normalize( vec3( modelViewMatrix * vec4( position, 1.0 ) ) );\n      v_normal = normalize( normalMatrix * normal );\n    }\n    `;\nMatcap$1.fragmentShader = ` \n\t\tuniform sampler2D u_map;  \n\t\tuniform float u_alpha;  \n\t\tvarying vec3 v_position;\n\t\tvarying vec3 v_normal;\n\n\t\t\n    void main() {\n\t\t\tvec3 f_r = reflect( v_position, v_normal );\n\t\t\tfloat f_m = 2. * sqrt( pow( f_r.x, 2. ) + pow( f_r.y, 2. ) + pow( f_r.z + 1., 2. ) );\n\t\t\tvec2 f_vN = f_r.xy / f_m + .5;\n\n\t\t\tvec3 f_base = texture2D(u_map, f_vN).rgb;\n\n      return vec4(f_base, u_alpha);\n    }\n  `;\n\nclass Texture$1 extends Abstract {\n  constructor(props) {\n    super(Texture$1, {\n      name: 'Texture',\n      ...props\n    });\n  }\n\n}\nTexture$1.u_alpha = 1;\nTexture$1.u_map = undefined;\nTexture$1.vertexShader = `\n    varying vec2 v_uv;\n    \n    void main() {\n        v_uv = uv;\n    }\n    `;\nTexture$1.fragmentShader = ` \n\t\tuniform sampler2D u_map;  \n\t\tuniform float u_alpha;  \n\t\tvarying vec2 v_uv;\n\n    void main() {\n\t\t\tvec4 f_color = texture2D(u_map, v_uv);\n      return vec4(f_color.rgb, f_color.a * u_alpha);\n    }\n  `;\n\nclass Displace$1 extends Abstract {\n  constructor(props) {\n    super(Displace$1, {\n      name: 'Displace',\n      ...props\n    }, self => {\n      self.schema.push({\n        value: self.type,\n        label: 'type',\n        options: Object.values(NoiseTypes)\n      });\n      self.schema.push({\n        value: self.mapping,\n        label: 'mapping',\n        options: Object.values(MappingTypes)\n      });\n      const noiseFunc = Displace$1.getNoiseFunction(self.type);\n      const mapping = Displace$1.getMapping(self.mapping);\n      self.vertexVariables = self.vertexVariables.replace('lamina_mapping_template', mapping);\n      self.vertexVariables = self.vertexVariables.replace('lamina_noise_template', noiseFunc);\n    });\n    this.type = 'perlin';\n    this.mapping = 'local';\n  }\n\n  static getNoiseFunction(type) {\n    switch (type) {\n      default:\n      case 'perlin':\n        return `lamina_noise_perlin`;\n\n      case 'simplex':\n        return `lamina_noise_simplex`;\n\n      case 'cell':\n        return `lamina_noise_worley`;\n\n      case 'white':\n        return `lamina_noise_white`;\n\n      case 'curl':\n        return `lamina_noise_swirl`;\n    }\n  }\n\n  static getMapping(type) {\n    switch (type) {\n      default:\n      case 'local':\n        return `p`;\n\n      case 'world':\n        return `(modelMatrix * vec4(p,1.0)).xyz`;\n\n      case 'uv':\n        return `vec3(uv, 0.)`;\n    }\n  }\n\n}\nDisplace$1.u_strength = 1;\nDisplace$1.u_scale = 1;\nDisplace$1.u_offset = new Vector3(0, 0, 0);\nDisplace$1.vertexShader = `\n       \n      uniform float u_strength;\n      uniform float u_scale;\n      uniform vec3 u_offset;\n\n      vec3 displace(vec3 p) {\n\t\t\t\tvec3 f_position = lamina_mapping_template;\n        float f_n = lamina_noise_template((f_position + u_offset) * u_scale) * u_strength;\n        vec3 f_newPosition = p + (f_n * normal);\n\n\t\t\t\treturn f_newPosition;\n      }\n\n      \n\t\t\tvec3 orthogonal(vec3 v) {\n  \t\t  return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0)\n  \t\t  : vec3(0.0, -v.z, v.y));\n  \t\t}\n  \t\tvec3 recalcNormals(vec3 newPos) {\n  \t\t  float offset = 0.001;\n  \t\t  vec3 tangent = orthogonal(normal);\n  \t\t  vec3 bitangent = normalize(cross(normal, tangent));\n  \t\t  vec3 neighbour1 = position + tangent * offset;\n  \t\t  vec3 neighbour2 = position + bitangent * offset;\n  \t\t  vec3 displacedNeighbour1 = displace(neighbour1);\n  \t\t  vec3 displacedNeighbour2 = displace(neighbour2);\n  \t\t  vec3 displacedTangent = displacedNeighbour1 - newPos;\n  \t\t  vec3 displacedBitangent = displacedNeighbour2 - newPos;\n  \t\t  return normalize(cross(displacedTangent, displacedBitangent));\n  \t\t}\n  \n  \n      void main() {\n       \n\t\t\t\tvec3 f_newPosition = displace(position);\n        lamina_finalNormal = recalcNormals(f_newPosition);\n\n        return f_newPosition;\n      }\n    `;\n\nclass Normal$1 extends Abstract {\n  constructor(props) {\n    super(Normal$1, {\n      name: 'Normal',\n      ...props\n    });\n  }\n\n}\nNormal$1.u_alpha = 1;\nNormal$1.u_direction = new Vector3(1, 1, 1);\nNormal$1.vertexShader = `   \n  varying vec3 v_normals; \n\n  void main() {\n    v_normals = normal;\n  }\n`;\nNormal$1.fragmentShader = `   \n  \tuniform float u_alpha;\n  \tuniform vec3 u_color;\n  \tuniform vec3 u_direction;\n\n\t\tvarying vec3 v_normals;\n\n    void main() {\n\t\t\tvec3 f_normalColor = vec3(1.);\n      f_normalColor.x = v_normals.x * u_direction.x;\n      f_normalColor.y = v_normals.y * u_direction.y;\n      f_normalColor.z = v_normals.z * u_direction.z;\n\n      return vec4(f_normalColor, u_alpha);\n    }\n  `;\n\nvar BlendModesChunk = /* glsl */\n`\nvec4 lamina_blend_add(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4(min(x.xyz + y.xyz, 1.0) * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nvec3 lamina_blend_alpha(const in vec3 x, const in vec3 y, const in float opacity) {\n\n\treturn y * opacity + x * (1.0 - opacity);\n\n}\n\nvec4 lamina_blend_alpha(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\tfloat a = min(y.a, opacity);\n\n\treturn vec4(lamina_blend_alpha(x.rgb, y.rgb, a), x.a);\n\n}\nvec4 lamina_blend_average(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4((x.xyz + y.xyz) * 0.5 * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nfloat lamina_blend_color_burn(const in float x, const in float y) {\n\n\treturn (y == 0.0) ? y : max(1.0 - (1.0 - x) / y, 0.0);\n\n}\n\nvec4 lamina_blend_color_burn(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\tvec4 z = vec4(\n\t\tlamina_blend_color_burn(x.r, y.r),\n\t\tlamina_blend_color_burn(x.g, y.g),\n\t\tlamina_blend_color_burn(x.b, y.b),\n\t\tlamina_blend_color_burn(x.a, y.a)\n\t);\n\n\treturn vec4(z.xyz * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nfloat lamina_blend_color_dodge(const in float x, const in float y) {\n\n\treturn (y == 1.0) ? y : min(x / (1.0 - y), 1.0);\n\n}\n\nvec4 lamina_blend_color_dodge(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\tvec4 z = vec4(\n\t\tlamina_blend_color_dodge(x.r, y.r),\n\t\tlamina_blend_color_dodge(x.g, y.g),\n\t\tlamina_blend_color_dodge(x.b, y.b),\n\t\tlamina_blend_color_dodge(x.a, y.a)\n\t);\n\n\treturn vec4(z.xyz * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nvec4 lamina_blend_darken(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4(min(x.xyz, y.xyz) * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nvec4 lamina_blend_difference(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4(abs(x.xyz - y.xyz) * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nfloat lamina_blend_divide(const in float x, const in float y) {\n\n\treturn (y > 0.0) ? min(x / y, 1.0) : 1.0;\n\n}\n\nvec4 lamina_blend_divide(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\tvec4 z = vec4(\n\t\tlamina_blend_divide(x.r, y.r),\n\t\tlamina_blend_divide(x.g, y.g),\n\t\tlamina_blend_divide(x.b, y.b),\n\t\tlamina_blend_divide(x.a, y.a)\n\t);\n\n\treturn vec4(z.xyz * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nvec4 lamina_blend_exclusion(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4((x.xyz + y.xyz - 2.0 * x.xyz * y.xyz) * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nvec4 lamina_blend_lighten(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4(max(x.xyz, y.xyz) * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nvec4 lamina_blend_multiply(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4( x.xyz * y.xyz * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nvec4 lamina_blend_negation(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4((1.0 - abs(1.0 - x.xyz - y.xyz)) * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nvec4 lamina_blend_normal(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4(y.xyz * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nfloat lamina_blend_overlay(const in float x, const in float y) {\n\n\treturn (x < 0.5) ? (2.0 * x * y) : (1.0 - 2.0 * (1.0 - x) * (1.0 - y));\n\n}\n\nvec4 lamina_blend_overlay(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\tvec4 z = vec4(\n\t\tlamina_blend_overlay(x.r, y.r),\n\t\tlamina_blend_overlay(x.g, y.g),\n\t\tlamina_blend_overlay(x.b, y.b),\n\t\tlamina_blend_overlay(x.a, y.a)\n\t);\n\n\treturn vec4(z.xyz * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nfloat lamina_blend_reflect(const in float x, const in float y) {\n\n\treturn (y == 1.0) ? y : min(x * x / (1.0 - y), 1.0);\n\n}\n\nvec4 lamina_blend_reflect(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\tvec4 z = vec4(\n\t\tlamina_blend_reflect(x.r, y.r),\n\t\tlamina_blend_reflect(x.g, y.g),\n\t\tlamina_blend_reflect(x.b, y.b),\n\t\tlamina_blend_reflect(x.a, y.a)\n\t);\n\n\treturn vec4(z.xyz * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nvec4 lamina_blend_screen(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4((1.0 - (1.0 - x.xyz) * (1.0 - y.xyz)) * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nfloat lamina_blend_softlight(const in float x, const in float y) {\n\n\treturn (y < 0.5) ?\n\t\t(2.0 * x * y + x * x * (1.0 - 2.0 * y)) :\n\t\t(sqrt(x) * (2.0 * y - 1.0) + 2.0 * x * (1.0 - y));\n\n}\n\nvec4 lamina_blend_softlight(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\tvec4 z = vec4(\n\t\tlamina_blend_softlight(x.r, y.r),\n\t\tlamina_blend_softlight(x.g, y.g),\n\t\tlamina_blend_softlight(x.b, y.b),\n\t\tlamina_blend_softlight(x.a, y.a)\n\t);\n\n\treturn vec4(z.xyz * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\nvec4 lamina_blend_subtract(const in vec4 x, const in vec4 y, const in float opacity) {\n\n\treturn vec4(max(x.xyz + y.xyz - 1.0, 0.0) * opacity + x.xyz * (1.0 - opacity), x.a);\n\n}\n\n`;\n\nvar NoiseChunk = /* glsl */\n`\n\n// From: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n// Huge thanks to the creators of these algorithms\n\nfloat lamina_noise_mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 lamina_noise_mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 lamina_noise_perm(vec4 x){return lamina_noise_mod289(((x * 34.0) + 1.0) * x);}\nvec4 lamina_noise_permute(vec4 x) { return mod(((x * 34.0) + 1.0) * x, 289.0); }\nvec4 lamina_noise_taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n\n\nfloat lamina_noise_white(vec2 p) {\n  return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) *\n               (0.1 + abs(sin(p.y * 13.0 + p.x))));\n}\n\nfloat lamina_noise_white(vec3 p) {\n  return lamina_noise_white(p.xy);\n}\n\n\nvec3 lamina_noise_fade(vec3 t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }\n\nfloat lamina_noise_perlin(vec3 P) {\n  vec3 Pi0 = floor(P);        // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P);        // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = lamina_noise_permute(lamina_noise_permute(ix) + iy);\n  vec4 ixy0 = lamina_noise_permute(ixy + iz0);\n  vec4 ixy1 = lamina_noise_permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n  vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n  vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n  vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n  vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n  vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n  vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n  vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n\n  vec4 norm0 = lamina_noise_taylorInvSqrt(\n      vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = lamina_noise_taylorInvSqrt(\n      vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = lamina_noise_fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111),\n                 fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return lamina_normalize(2.2 * n_xyz);\n}\n\nfloat lamina_noise_simplex(vec3 v) {\n  const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n  //  x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n  // Permutations\n  i = mod(i, 289.0);\n  vec4 p = lamina_noise_permute(lamina_noise_permute(lamina_noise_permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y +\n                             vec4(0.0, i1.y, i2.y, 1.0)) +\n                    i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n  // Gradients\n  // ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3 ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z); //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_); // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4(x.xy, y.xy);\n  vec4 b1 = vec4(x.zw, y.zw);\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n  // Normalise gradients\n  vec4 norm =\n      lamina_noise_taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m =\n      max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n  m = m * m;\n  return lamina_normalize(42.0 *\n         dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3))));\n}\n\nvec3 lamina_noise_simplex3(vec3 x) {\n  float s = lamina_noise_simplex(vec3(x));\n  float s1 = lamina_noise_simplex(vec3(x.y - 19.1, x.z + 33.4, x.x + 47.2));\n  float s2 = lamina_noise_simplex(vec3(x.z + 74.2, x.x - 124.5, x.y + 99.4));\n  vec3 c = vec3(s, s1, s2);\n  return c;\n}\n\nvec3 lamina_noise_curl(vec3 p) {\n  const float e = .1;\n  vec3 dx = vec3(e, 0.0, 0.0);\n  vec3 dy = vec3(0.0, e, 0.0);\n  vec3 dz = vec3(0.0, 0.0, e);\n\n  vec3 p_x0 = lamina_noise_simplex3(p - dx);\n  vec3 p_x1 = lamina_noise_simplex3(p + dx);\n  vec3 p_y0 = lamina_noise_simplex3(p - dy);\n  vec3 p_y1 = lamina_noise_simplex3(p + dy);\n  vec3 p_z0 = lamina_noise_simplex3(p - dz);\n  vec3 p_z1 = lamina_noise_simplex3(p + dz);\n\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n  const float divisor = 1.0 / (2.0 * e);\n  return normalize(vec3(x, y, z) * divisor);\n}\n\nvec3 lamina_permute(vec3 x) {\n  return mod((34.0 * x + 1.0) * x, 289.0);\n}\n\nvec3 lamina_dist(vec3 x, vec3 y, vec3 z,  bool manhattanDistance) {\n  return manhattanDistance ?  abs(x) + abs(y) + abs(z) :  (x * x + y * y + z * z);\n}\n\n// From: https://github.com/Erkaman/glsl-worley\nfloat lamina_noise_worley(vec3 P) {\n  float jitter = 1.;\n  bool manhattanDistance = false; \n\n  float K = 0.142857142857; // 1/7\n  float Ko = 0.428571428571; // 1/2-K/2\n  float  K2 = 0.020408163265306; // 1/(7*7)\n  float Kz = 0.166666666667; // 1/6\n  float Kzo = 0.416666666667; // 1/2-1/6*2\n\n\tvec3 Pi = mod(floor(P), 289.0);\n \tvec3 Pf = fract(P) - 0.5;\n\n\tvec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n\n\tvec3 p = lamina_permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n\tvec3 p1 = lamina_permute(p + Pi.y - 1.0);\n\tvec3 p2 = lamina_permute(p + Pi.y);\n\tvec3 p3 = lamina_permute(p + Pi.y + 1.0);\n\n\tvec3 p11 = lamina_permute(p1 + Pi.z - 1.0);\n\tvec3 p12 = lamina_permute(p1 + Pi.z);\n\tvec3 p13 = lamina_permute(p1 + Pi.z + 1.0);\n\n\tvec3 p21 = lamina_permute(p2 + Pi.z - 1.0);\n\tvec3 p22 = lamina_permute(p2 + Pi.z);\n\tvec3 p23 = lamina_permute(p2 + Pi.z + 1.0);\n\n\tvec3 p31 = lamina_permute(p3 + Pi.z - 1.0);\n\tvec3 p32 = lamina_permute(p3 + Pi.z);\n\tvec3 p33 = lamina_permute(p3 + Pi.z + 1.0);\n\n\tvec3 ox11 = fract(p11*K) - Ko;\n\tvec3 oy11 = mod(floor(p11*K), 7.0)*K - Ko;\n\tvec3 oz11 = floor(p11*K2)*Kz - Kzo; // p11 < 289 guaranteed\n\n\tvec3 ox12 = fract(p12*K) - Ko;\n\tvec3 oy12 = mod(floor(p12*K), 7.0)*K - Ko;\n\tvec3 oz12 = floor(p12*K2)*Kz - Kzo;\n\n\tvec3 ox13 = fract(p13*K) - Ko;\n\tvec3 oy13 = mod(floor(p13*K), 7.0)*K - Ko;\n\tvec3 oz13 = floor(p13*K2)*Kz - Kzo;\n\n\tvec3 ox21 = fract(p21*K) - Ko;\n\tvec3 oy21 = mod(floor(p21*K), 7.0)*K - Ko;\n\tvec3 oz21 = floor(p21*K2)*Kz - Kzo;\n\n\tvec3 ox22 = fract(p22*K) - Ko;\n\tvec3 oy22 = mod(floor(p22*K), 7.0)*K - Ko;\n\tvec3 oz22 = floor(p22*K2)*Kz - Kzo;\n\n\tvec3 ox23 = fract(p23*K) - Ko;\n\tvec3 oy23 = mod(floor(p23*K), 7.0)*K - Ko;\n\tvec3 oz23 = floor(p23*K2)*Kz - Kzo;\n\n\tvec3 ox31 = fract(p31*K) - Ko;\n\tvec3 oy31 = mod(floor(p31*K), 7.0)*K - Ko;\n\tvec3 oz31 = floor(p31*K2)*Kz - Kzo;\n\n\tvec3 ox32 = fract(p32*K) - Ko;\n\tvec3 oy32 = mod(floor(p32*K), 7.0)*K - Ko;\n\tvec3 oz32 = floor(p32*K2)*Kz - Kzo;\n\n\tvec3 ox33 = fract(p33*K) - Ko;\n\tvec3 oy33 = mod(floor(p33*K), 7.0)*K - Ko;\n\tvec3 oz33 = floor(p33*K2)*Kz - Kzo;\n\n\tvec3 dx11 = Pfx + jitter*ox11;\n\tvec3 dy11 = Pfy.x + jitter*oy11;\n\tvec3 dz11 = Pfz.x + jitter*oz11;\n\n\tvec3 dx12 = Pfx + jitter*ox12;\n\tvec3 dy12 = Pfy.x + jitter*oy12;\n\tvec3 dz12 = Pfz.y + jitter*oz12;\n\n\tvec3 dx13 = Pfx + jitter*ox13;\n\tvec3 dy13 = Pfy.x + jitter*oy13;\n\tvec3 dz13 = Pfz.z + jitter*oz13;\n\n\tvec3 dx21 = Pfx + jitter*ox21;\n\tvec3 dy21 = Pfy.y + jitter*oy21;\n\tvec3 dz21 = Pfz.x + jitter*oz21;\n\n\tvec3 dx22 = Pfx + jitter*ox22;\n\tvec3 dy22 = Pfy.y + jitter*oy22;\n\tvec3 dz22 = Pfz.y + jitter*oz22;\n\n\tvec3 dx23 = Pfx + jitter*ox23;\n\tvec3 dy23 = Pfy.y + jitter*oy23;\n\tvec3 dz23 = Pfz.z + jitter*oz23;\n\n\tvec3 dx31 = Pfx + jitter*ox31;\n\tvec3 dy31 = Pfy.z + jitter*oy31;\n\tvec3 dz31 = Pfz.x + jitter*oz31;\n\n\tvec3 dx32 = Pfx + jitter*ox32;\n\tvec3 dy32 = Pfy.z + jitter*oy32;\n\tvec3 dz32 = Pfz.y + jitter*oz32;\n\n\tvec3 dx33 = Pfx + jitter*ox33;\n\tvec3 dy33 = Pfy.z + jitter*oy33;\n\tvec3 dz33 = Pfz.z + jitter*oz33;\n\n\tvec3 d11 = lamina_dist(dx11, dy11, dz11, manhattanDistance);\n\tvec3 d12 = lamina_dist(dx12, dy12, dz12, manhattanDistance);\n\tvec3 d13 = lamina_dist(dx13, dy13, dz13, manhattanDistance);\n\tvec3 d21 = lamina_dist(dx21, dy21, dz21, manhattanDistance);\n\tvec3 d22 = lamina_dist(dx22, dy22, dz22, manhattanDistance);\n\tvec3 d23 = lamina_dist(dx23, dy23, dz23, manhattanDistance);\n\tvec3 d31 = lamina_dist(dx31, dy31, dz31, manhattanDistance);\n\tvec3 d32 = lamina_dist(dx32, dy32, dz32, manhattanDistance);\n\tvec3 d33 = lamina_dist(dx33, dy33, dz33, manhattanDistance);\n\n\tvec3 d1a = min(d11, d12);\n\td12 = max(d11, d12);\n\td11 = min(d1a, d13); // Smallest now not in d12 or d13\n\td13 = max(d1a, d13);\n\td12 = min(d12, d13); // 2nd smallest now not in d13\n\tvec3 d2a = min(d21, d22);\n\td22 = max(d21, d22);\n\td21 = min(d2a, d23); // Smallest now not in d22 or d23\n\td23 = max(d2a, d23);\n\td22 = min(d22, d23); // 2nd smallest now not in d23\n\tvec3 d3a = min(d31, d32);\n\td32 = max(d31, d32);\n\td31 = min(d3a, d33); // Smallest now not in d32 or d33\n\td33 = max(d3a, d33);\n\td32 = min(d32, d33); // 2nd smallest now not in d33\n\tvec3 da = min(d11, d21);\n\td21 = max(d11, d21);\n\td11 = min(da, d31); // Smallest now in d11\n\td31 = max(da, d31); // 2nd smallest now not in d31\n\td11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n\td11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\n\td12 = min(d12, d21); // 2nd smallest now not in d21\n\td12 = min(d12, d22); // nor in d22\n\td12 = min(d12, d31); // nor in d31\n\td12 = min(d12, d32); // nor in d32\n\td11.yz = min(d11.yz,d12.xy); // nor in d12.yz\n\td11.y = min(d11.y,d12.z); // Only two more to go\n\td11.y = min(d11.y,d11.z); // Done! (Phew!)\n\n  vec2 F = sqrt(d11.xy);\n\treturn F.x; // F1, F2\n\n}\n\nfloat lamina_noise_swirl(vec3 position) {\n    float scale = 0.1;\n    float freq = 4. * scale;\n    float t = 1.;\n\n    vec3 pos = (position * scale) + lamina_noise_curl(position * 7. * scale);\n\n    float worley1 = 1. - lamina_noise_worley((pos * (freq * 2.)) +  (t * 2.));\n    float worley2 = 1. - lamina_noise_worley((pos * (freq * 4.)) +  (t * 4.));\n    float worley3 = 1. - lamina_noise_worley((pos * (freq * 8.)) +  (t * 8.));\n    float worley4 = 1. - lamina_noise_worley((pos * (freq * 16.)) +  (t * 16.));\n    \n    float fbm1 = worley1 * .625 + worley2 * .25 + worley3 * .125;\n    float fbm2 = worley2 * .625 + worley3 * .25 + worley4 * .125;\n    float fbm3 = worley3 * .75 + worley4 * .25;\n\n    vec3 curlWorleyFbm = vec3(fbm1, fbm2, fbm3);\n    float curlWorley = curlWorleyFbm.r * .625 + curlWorleyFbm.g * .25 + \n        curlWorleyFbm.b * .125;\n\n    return curlWorley;\n}\n  \n  \n`;\n\nvar HelpersChunk = /* glsl */\n`\n\nfloat lamina_map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat lamina_normalize(float v) { return lamina_map(v, -1.0, 1.0, 0.0, 1.0); }\n`;\n\nclass LayerMaterial$1 extends CustomShaderMaterial {\n  constructor({\n    color,\n    alpha,\n    lighting,\n    layers,\n    name,\n    ...props\n  } = {}) {\n    super({\n      baseMaterial: ShadingTypes[lighting || 'basic'],\n      ...props\n    });\n    this.name = 'LayerMaterial';\n    this.layers = [];\n    this.lighting = 'basic';\n\n    const _baseColor = color || 'white';\n\n    const _alpha = alpha != null ? alpha : 1;\n\n    this.uniforms = {\n      u_lamina_color: {\n        value: typeof _baseColor === 'string' ? new THREE.Color(_baseColor).convertSRGBToLinear() : _baseColor\n      },\n      u_lamina_alpha: {\n        value: _alpha\n      }\n    };\n    this.layers = layers || this.layers;\n    this.lighting = lighting || this.lighting;\n    this.name = name || this.name;\n    this.refresh();\n  }\n\n  genShaders() {\n    let vertexVariables = '';\n    let fragmentVariables = '';\n    let vertexShader = '';\n    let fragmentShader = '';\n    let uniforms = {};\n    this.layers.filter(l => l.visible).forEach(l => {\n      // l.buildShaders(l.constructor)\n      vertexVariables += l.vertexVariables + '\\n';\n      fragmentVariables += l.fragmentVariables + '\\n';\n      vertexShader += l.vertexShader + '\\n';\n      fragmentShader += l.fragmentShader + '\\n';\n      uniforms = { ...uniforms,\n        ...l.uniforms\n      };\n    });\n    uniforms = { ...uniforms,\n      ...this.uniforms\n    };\n    return {\n      uniforms,\n      vertexShader: `\n        ${HelpersChunk}\n        ${NoiseChunk}\n        ${vertexVariables}\n\n        void main() {\n          vec3 lamina_finalPosition = position;\n          vec3 lamina_finalNormal = normal;\n\n          ${vertexShader}\n\n          csm_Position = lamina_finalPosition;\n          csm_Normal = lamina_finalNormal;\n        }\n        `,\n      fragmentShader: `\n        ${HelpersChunk}\n        ${NoiseChunk}\n        ${BlendModesChunk}\n        ${fragmentVariables}\n\n        uniform vec3 u_lamina_color;\n        uniform float u_lamina_alpha;\n\n        void main() {\n          vec4 lamina_finalColor = vec4(u_lamina_color, u_lamina_alpha);\n\n          ${fragmentShader}\n\n          csm_DiffuseColor = lamina_finalColor;\n         \n        }\n        `\n    };\n  }\n\n  refresh() {\n    const {\n      uniforms,\n      fragmentShader,\n      vertexShader\n    } = this.genShaders();\n    super.update({\n      fragmentShader,\n      vertexShader,\n      uniforms\n    });\n  }\n\n  serialize() {\n    return {\n      constructor: 'LayerMaterial',\n      properties: {\n        color: this.color,\n        alpha: this.alpha,\n        name: this.name,\n        lighting: this.lighting\n      }\n    };\n  }\n\n  set color(v) {\n    var _this$uniforms, _this$uniforms$u_lami;\n\n    if ((_this$uniforms = this.uniforms) != null && (_this$uniforms$u_lami = _this$uniforms.u_lamina_color) != null && _this$uniforms$u_lami.value) this.uniforms.u_lamina_color.value = typeof v === 'string' ? new THREE.Color(v).convertSRGBToLinear() : v;\n  }\n\n  get color() {\n    var _this$uniforms2, _this$uniforms2$u_lam;\n\n    return (_this$uniforms2 = this.uniforms) == null ? void 0 : (_this$uniforms2$u_lam = _this$uniforms2.u_lamina_color) == null ? void 0 : _this$uniforms2$u_lam.value;\n  }\n\n  set alpha(v) {\n    this.uniforms.u_lamina_alpha.value = v;\n  }\n\n  get alpha() {\n    return this.uniforms.u_lamina_alpha.value;\n  }\n\n}\n\nvar LAYERS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LayerMaterial: LayerMaterial$1,\n  Abstract: Abstract,\n  Depth: Depth$1,\n  Color: Color$1,\n  Noise: Noise$1,\n  Fresnel: Fresnel$1,\n  Gradient: Gradient$1,\n  Matcap: Matcap$1,\n  Texture: Texture$1,\n  Displace: Displace$1,\n  Normal: Normal$1\n});\n\nfunction getPropsFromLayer(layer) {\n  // @ts-ignore\n  const constructor = LAYERS[layer.constructor];\n  const instance = new constructor();\n  let props = '';\n  Object.entries(layer.properties).forEach(([key, val]) => {\n    var _constructor2;\n\n    const defaultVal = (_constructor2 = constructor['u_' + key]) != null ? _constructor2 : instance[key];\n\n    switch (key) {\n      case 'name':\n        if (val !== layer.constructor) props += ` ${key}={${JSON.stringify(val)}}`;\n        break;\n\n      case 'visible':\n        if (!val) props += ` ${key}={${JSON.stringify(val)}}`;\n        break;\n\n      default:\n        if (val !== defaultVal) props += ` ${key}={${JSON.stringify(val)}}`;\n        break;\n    }\n  });\n  return props;\n}\n\nfunction serializedLayersToJSX(layers, material) {\n  const materialProps = getPropsFromLayer(material);\n  const jsx = `\n    <LayerMaterial${materialProps}>\n      ${layers.map(layer => {\n    const props = getPropsFromLayer(layer);\n    return `<${layer.constructor}${props} />`;\n  }).join('\\n\\t')}\n    </LayerMaterial>\n    `;\n  return jsx;\n}\n\nfunction getJSPropsFromLayer(layer) {\n  // @ts-ignore\n  const constructor = LAYERS[layer.constructor];\n  const instance = new constructor();\n  let props = '\\t';\n  let entries = Object.entries(layer.properties);\n  entries.forEach(([key, val], idx) => {\n    var _constructor;\n\n    const eol = '\\n\\t\\t';\n\n    if (key.includes('color')) {\n      const v = typeof val === \"string\" ? val : '#' + val.getHexString();\n      props += `${key}: ${JSON.stringify(v)},${eol}`;\n    } else {\n      const defaultVal = (_constructor = constructor['u_' + key]) != null ? _constructor : instance[key];\n\n      switch (key) {\n        case 'name':\n          if (val !== layer.constructor) props += `${key}: ${JSON.stringify(val)},${eol}`;\n          break;\n\n        case 'visible':\n          if (!val) props += `${key}:${JSON.stringify(val)},${eol}`;\n          break;\n\n        default:\n          if (val !== defaultVal) props += `${key}: ${JSON.stringify(val)},${eol}`;\n          break;\n      }\n    }\n  });\n  return props;\n}\n\nfunction serializedLayersToJS(layers, material) {\n  const materialProps = getJSPropsFromLayer(material);\n  const jsLayers = `${layers.map(l => {\n    return `new ${l.constructor}({\n      ${getJSPropsFromLayer(l)}\n      })`;\n  }).join(',\\n\\t\\t')}`;\n  const js = `\n  new LayerMaterial({\n    ${materialProps}\n    layers: [\n      ${jsLayers}\n    ]\n  })`;\n  return js;\n}\n\nextend({\n  LayerMaterial: LayerMaterial$1\n});\n\nfunction DynamicLeva({\n  name,\n  layers,\n  store,\n  setUpdate\n}) {\n  useControls(name, () => {\n    const o = {};\n    layers.forEach((layer, i) => {\n      const n = `${layer.label} ~${i}`;\n      o[n] = layer;\n\n      o[n].onChange = () => setUpdate([`${name}.${n}`, layer.label]);\n    });\n    return o;\n  }, {\n    store\n  }, [layers, name]);\n  return null;\n}\n\nconst DebugLayerMaterial = /*#__PURE__*/React.forwardRef(({\n  children,\n  ...props\n}, forwardRef) => {\n  var _ref$current, _ref$current2, _ref$current3;\n\n  const ref = React.useRef(null);\n  useImperativeHandle(forwardRef, () => ref.current);\n  const store = useCreateStore();\n  const [layers, setLayers] = React.useState({});\n  const [path, setPath] = React.useState(['', '']);\n  const textureLoader = useMemo(() => new TextureLoader(), []);\n  useControls({\n    'Copy JSX': button(() => {\n      const serialized = ref.current.layers.map(l => l.serialize());\n      const jsx = serializedLayersToJSX(serialized, ref.current.serialize());\n      navigator.clipboard.writeText(jsx);\n    }),\n    'Copy JS': button(() => {\n      const serialized = ref.current.layers.map(l => l.serialize());\n      const js = serializedLayersToJS(serialized, ref.current.serialize());\n      navigator.clipboard.writeText(js);\n    })\n  }, {\n    store\n  });\n  const {\n    Lighting\n  } = useControls('Base', {\n    Color: {\n      value: '#' + new Color$2(((_ref$current = ref.current) == null ? void 0 : _ref$current.color) || (props == null ? void 0 : props.color) || 'white').convertLinearToSRGB().getHexString(),\n      onChange: v => {\n        ref.current.color = v;\n      }\n    },\n    Alpha: {\n      value: ((_ref$current2 = ref.current) == null ? void 0 : _ref$current2.alpha) || (props == null ? void 0 : props.alpha) || 1,\n      min: 0,\n      max: 1,\n      onChange: v => {\n        ref.current.alpha = v;\n      }\n    },\n    Lighting: {\n      value: ((_ref$current3 = ref.current) == null ? void 0 : _ref$current3.lighting) || (props == null ? void 0 : props.lighting) || 'basic',\n      options: Object.keys(ShadingTypes)\n    }\n  }, {\n    store\n  });\n  const [args, otherProps] = useMemo(() => getLayerMaterialArgs({ ...props,\n    lighting: Lighting\n  }), [props, Lighting]);\n  React.useEffect(() => {\n    const layers = ref.current.layers;\n    const schema = {};\n    layers.forEach((layer, i) => {\n      if (layer.getSchema) schema[`${layer.name} ~${i}`] = layer.getSchema();\n    });\n    setLayers(schema);\n  }, [children]);\n  React.useEffect(() => {\n    const data = store.getData();\n    const updatedData = data[path[0]];\n\n    if (updatedData) {\n      const split = path[0].split('.');\n      const index = parseInt(split[0].split(' ~')[1]);\n      const property = path[1];\n      const id = ref.current.layers[index].uuid;\n      const uniform = ref.current.uniforms[`u_${id}_${property}`];\n      const layer = ref.current.layers[index];\n\n      if (property !== 'map') {\n        layer[property] = updatedData.value;\n\n        if (uniform) {\n          uniform.value = getUniform(updatedData.value);\n        } else {\n          layer.buildShaders(layer.constructor);\n          ref.current.refresh();\n        }\n      } else {\n\n        (async () => {\n          try {\n            if (updatedData.value) {\n              const t = await textureLoader.loadAsync(updatedData.value);\n              layer[property] = t;\n              uniform.value = t;\n            } else {\n              layer[property] = undefined;\n              uniform.value = undefined;\n            }\n          } catch (error) {\n            console.error(error);\n          }\n        })();\n      }\n    }\n  }, [path]);\n  React.useLayoutEffect(() => {\n    ref.current.layers = ref.current.__r3f.objects;\n    ref.current.refresh();\n  }, [children, args]);\n  React.useLayoutEffect(() => {\n    const root = document.body.querySelector('#root');\n    const div = document.createElement('div');\n\n    if (root) {\n      root.appendChild(div);\n      const levaRoot = createRoot(div);\n      levaRoot.render( /*#__PURE__*/React.createElement(LevaPanel, {\n        titleBar: {\n          title: props.name || ref.current.name\n        },\n        store: store\n      }));\n    }\n\n    return () => {\n      div.remove();\n    };\n  }, [props.name]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, Object.entries(layers).map(([name, layers], i) => /*#__PURE__*/React.createElement(DynamicLeva, {\n    key: `${name} ~${i}`,\n    name: name,\n    layers: layers,\n    store: store,\n    setUpdate: setPath\n  })), /*#__PURE__*/React.createElement(\"layerMaterial\", _extends({\n    args: [args],\n    ref: ref\n  }, otherProps), children));\n});\n\nextend({\n  LayerMaterial: LayerMaterial$1,\n  Depth_: Depth$1,\n  Color_: Color$1,\n  Noise_: Noise$1,\n  Fresnel_: Fresnel$1,\n  Gradient_: Gradient$1,\n  Matcap_: Matcap$1,\n  Texture_: Texture$1,\n  Displace_: Displace$1,\n  Normal_: Normal$1\n});\nconst LayerMaterial = /*#__PURE__*/React.forwardRef(({\n  children,\n  ...props\n}, forwardRef) => {\n  const ref = React.useRef(null);\n  useImperativeHandle(forwardRef, () => ref.current);\n  React.useLayoutEffect(() => {\n    ref.current.layers = ref.current.__r3f.objects;\n    ref.current.refresh();\n  }, [children]);\n  const [args, otherProps] = useMemo(() => getLayerMaterialArgs(props), [props]);\n  return /*#__PURE__*/React.createElement(\"layerMaterial\", _extends({\n    args: [args],\n    ref: ref\n  }, otherProps), children);\n});\n\nfunction getNonUniformArgs(props) {\n  return [{\n    mode: props == null ? void 0 : props.mode,\n    visible: props == null ? void 0 : props.visible,\n    type: props == null ? void 0 : props.type,\n    mapping: props == null ? void 0 : props.mapping,\n    map: props == null ? void 0 : props.map,\n    axes: props == null ? void 0 : props.axes\n  }];\n}\n\nconst Depth = /*#__PURE__*/React.forwardRef((props, forwardRef) => {\n  //@ts-ignore\n  return /*#__PURE__*/React.createElement(\"depth_\", _extends({\n    args: getNonUniformArgs(props),\n    ref: forwardRef\n  }, props));\n});\nconst Color = /*#__PURE__*/React.forwardRef((props, ref) => {\n  //@ts-ignore\n  return /*#__PURE__*/React.createElement(\"color_\", _extends({\n    ref: ref,\n    args: getNonUniformArgs(props)\n  }, props));\n});\nconst Noise = /*#__PURE__*/React.forwardRef((props, ref) => {\n  //@ts-ignore\n  return /*#__PURE__*/React.createElement(\"noise_\", _extends({\n    ref: ref,\n    args: getNonUniformArgs(props)\n  }, props));\n});\nconst Fresnel = /*#__PURE__*/React.forwardRef((props, ref) => {\n  //@ts-ignore\n  return /*#__PURE__*/React.createElement(\"fresnel_\", _extends({\n    ref: ref,\n    args: getNonUniformArgs(props)\n  }, props));\n});\nconst Gradient = /*#__PURE__*/React.forwardRef((props, ref) => {\n  //@ts-ignore\n  return /*#__PURE__*/React.createElement(\"gradient_\", _extends({\n    ref: ref,\n    args: getNonUniformArgs(props)\n  }, props));\n});\nconst Matcap = /*#__PURE__*/React.forwardRef((props, ref) => {\n  //@ts-ignore\n  return /*#__PURE__*/React.createElement(\"matcap_\", _extends({\n    ref: ref,\n    args: getNonUniformArgs(props)\n  }, props));\n});\nconst Texture = /*#__PURE__*/React.forwardRef((props, ref) => {\n  //@ts-ignore\n  return /*#__PURE__*/React.createElement(\"texture_\", _extends({\n    ref: ref,\n    args: getNonUniformArgs(props)\n  }, props));\n});\nconst Displace = /*#__PURE__*/React.forwardRef((props, ref) => {\n  //@ts-ignore\n  return /*#__PURE__*/React.createElement(\"displace_\", _extends({\n    ref: ref,\n    args: getNonUniformArgs(props)\n  }, props));\n});\nconst Normal = /*#__PURE__*/React.forwardRef((props, ref) => {\n  //@ts-ignore\n  return /*#__PURE__*/React.createElement(\"normal_\", _extends({\n    ref: ref,\n    args: getNonUniformArgs(props)\n  }, props));\n});\n\nexport { Color, DebugLayerMaterial, Depth, Displace, Fresnel, Gradient, LayerMaterial, Matcap, Noise, Normal, Texture };\n", "import { Material, MathUtils } from 'three';\nimport hash from 'object-hash';\nimport tokenize from 'glsl-tokenizer';\nimport stringify from 'glsl-token-string';\nimport tokenFunctions from 'glsl-token-functions';\n\nvar keywords = {\n  position: 'csm_Position',\n  positionRaw: 'csm_PositionRaw',\n  pointSize: 'csm_PointSize',\n  fragColor: 'csm_FragColor',\n  // PBR\n  diffuseColor: 'csm_DiffuseColor',\n  normal: 'csm_Normal',\n  roughness: 'csm_Roughness',\n  metalness: 'csm_Metalness',\n  emissive: 'csm_Emissive'\n};\n\nconst defaultPatchMap = {\n  // VERT\n  [`${keywords.normal}`]: {\n    '#include <beginnormal_vertex>': `\n    vec3 objectNormal = ${keywords.normal};\n    #ifdef USE_TANGENT\n\t    vec3 objectTangent = vec3( tangent.xyz );\n    #endif\n    `\n  },\n  [`${keywords.position}`]: {\n    '#include <begin_vertex>': `\n    vec3 transformed = ${keywords.position};\n  `\n  },\n  [`${keywords.positionRaw}`]: {\n    '#include <begin_vertex>': `\n    vec4 csm_positionUnprojected = ${keywords.positionRaw};\n    mat4x4 csm_unprojectMatrix = projectionMatrix * modelViewMatrix;\n    #ifdef USE_INSTANCING\n      csm_unprojectMatrix = csm_unprojectMatrix * instanceMatrix;\n    #endif\n    csm_positionUnprojected = inverse(csm_unprojectMatrix) * csm_positionUnprojected;\n    vec3 transformed = csm_positionUnprojected.xyz;\n  `\n  },\n  [`${keywords.pointSize}`]: {\n    'gl_PointSize = size;': `\n    gl_PointSize = ${keywords.pointSize};\n    `\n  },\n  // FRAG\n  [`${keywords.diffuseColor}`]: {\n    '#include <color_fragment>': `\n    #include <color_fragment>\n    diffuseColor = ${keywords.diffuseColor};\n  `\n  },\n  [`${keywords.fragColor}`]: {\n    '#include <dithering_fragment>': `\n    #include <dithering_fragment>\n    gl_FragColor  = ${keywords.fragColor};\n  `\n  },\n  [`${keywords.emissive}`]: {\n    'vec3 totalEmissiveRadiance = emissive;': `\n    vec3 totalEmissiveRadiance = ${keywords.emissive};\n    `\n  },\n  [`${keywords.roughness}`]: {\n    '#include <roughnessmap_fragment>': `\n    #include <roughnessmap_fragment>\n    roughnessFactor = ${keywords.roughness};\n    `\n  },\n  [`${keywords.metalness}`]: {\n    '#include <metalnessmap_fragment>': `\n    #include <metalnessmap_fragment>\n    metalnessFactor = ${keywords.metalness};\n    `\n  }\n};\nconst shaderMaterial_PatchMap = {\n  // VERT\n  [`${keywords.position}`]: {\n    'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );': `\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( ${keywords.position}, 1.0 );\n  `\n  },\n  [`${keywords.positionRaw}`]: {\n    'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );': `\n    gl_Position = ${keywords.position};\n  `\n  },\n  // FRAG\n  [`${keywords.diffuseColor}`]: {\n    'gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );': `\n    gl_FragColor = ${keywords.diffuseColor};\n  `\n  },\n  [`${keywords.fragColor}`]: {\n    'gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );': `\n    gl_FragColor = ${keywords.fragColor};\n  `\n  }\n};\n\nconst defaultDefinitions =\n/* glsl */\n`\n\n#ifdef IS_VERTEX\n    vec3 csm_Position = position;\n    vec4 csm_PositionRaw = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n    vec3 csm_Normal = normal;\n#else\n    #if defined IS_SHADERMATERIAL || defined IS_MESHDEPTHMATERIAL || defined IS_MESHNORMALMATERIAL\n        vec4 csm_DiffuseColor = vec4(1., 0., 1., 1.);\n        vec4 csm_FragColor = vec4(1., 0., 1., 1.);\n    #else\n        #if defined IS_MESHSTANDARDMATERIAL || defined IS_MESHPHYSICALMATERIAL\n            vec3 csm_Emissive = emissive;\n            float csm_Roughness = roughness;\n            float csm_Metalness = metalness;\n        #endif\n        \n        #ifdef USE_MAP\n            vec4 _csm_sampledDiffuseColor = texture2D(map, vUv);\n\n            #ifdef DECODE_VIDEO_TEXTURE\n            // inline sRGB decode (TODO: Remove this code when https://crbug.com/1256340 is solved)\n            _csm_sampledDiffuseColor = vec4(mix(pow(_csm_sampledDiffuseColor.rgb * 0.9478672986 + vec3(0.0521327014), vec3(2.4)), _csm_sampledDiffuseColor.rgb * 0.0773993808, vec3(lessThanEqual(_csm_sampledDiffuseColor.rgb, vec3(0.04045)))), _csm_sampledDiffuseColor.w);\n            #endif\n\n            vec4 csm_DiffuseColor = vec4(diffuse, opacity) * _csm_sampledDiffuseColor;\n            vec4 csm_FragColor = vec4(diffuse, opacity) * _csm_sampledDiffuseColor;\n        #else\n            vec4 csm_DiffuseColor = vec4(diffuse, opacity);\n            vec4 csm_FragColor = vec4(diffuse, opacity);\n        #endif\n    #endif\n#endif\n`;\n\nconst replaceAll = (str, find, rep) => str.split(find).join(rep);\n\nconst escapeRegExpMatch = function (s) {\n  return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\n\nconst isExactMatch = (str, match) => {\n  return new RegExp(`\\\\b${escapeRegExpMatch(match)}\\\\b`).test(str);\n};\n\nfunction isConstructor(f) {\n  try {\n    // @ts-ignore\n    new f();\n  } catch (err) {\n    if (err.message.indexOf('is not a constructor') >= 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\nclass CustomShaderMaterial extends Material {\n  constructor({\n    baseMaterial,\n    fragmentShader,\n    vertexShader,\n    uniforms,\n    patchMap,\n    cacheKey,\n    ...opts\n  }) {\n    let base;\n\n    if (isConstructor(baseMaterial)) {\n      base = new baseMaterial(opts);\n    } else {\n      base = baseMaterial;\n      Object.assign(base, opts);\n    }\n\n    if (base.type === 'RawShaderMaterial') {\n      throw new Error('CustomShaderMaterial does not support RawShaderMaterial');\n    }\n\n    super();\n    this.uniforms = uniforms || {};\n    this._customPatchMap = patchMap || {};\n    this._fs = fragmentShader || '';\n    this._vs = vertexShader || '';\n    this._cacheKey = cacheKey;\n    this._base = baseMaterial;\n    this._type = base.type;\n    this._instanceID = MathUtils.generateUUID();\n\n    for (const key in base) {\n      let k = key;\n\n      if (key.startsWith('_')) {\n        k = key.split('_')[1];\n      } // @ts-ignore\n\n\n      if (this[k] === undefined) this[k] = 0; // @ts-ignore\n\n      this[k] = base[k];\n    }\n\n    this.update({\n      fragmentShader,\n      vertexShader,\n      uniforms,\n      cacheKey\n    });\n  }\n\n  update(opts) {\n    const uniforms = (opts == null ? void 0 : opts.uniforms) || {};\n    const fragmentShader = (opts == null ? void 0 : opts.fragmentShader) || this._fs;\n    const vertexShader = (opts == null ? void 0 : opts.vertexShader) || this._vs;\n    const serializedUniforms = Object.values(uniforms).reduce((prev, {\n      value\n    }) => {\n      return prev + JSON.stringify(value);\n    }, '');\n    this.uuid = (opts == null ? void 0 : opts.cacheKey == null ? void 0 : opts.cacheKey()) || hash([fragmentShader, vertexShader, serializedUniforms, this._instanceID]);\n    this.generateMaterial({\n      fragmentShader,\n      vertexShader,\n      uniforms\n    });\n  }\n\n  clone() {\n    // @ts-ignore\n    const c = new this.constructor({\n      baseMaterial: this._base,\n      fragmentShader: this._fs,\n      vertexShader: this._vs,\n      patchMap: this._customPatchMap,\n      uniforms: this.uniforms,\n      cacheKey: this._cacheKey\n    });\n\n    for (const key in this) {\n      if (key === 'uuid') continue; // @ts-ignore\n\n      c[key] = this[key];\n    }\n\n    return c;\n  }\n\n  generateMaterial({\n    fragmentShader,\n    vertexShader,\n    uniforms\n  }) {\n    const parsedFragmentShader = this.parseShader(fragmentShader);\n    const parsedVertexShader = this.parseShader(vertexShader);\n    this.uniforms = uniforms || {};\n\n    this.customProgramCacheKey = () => {\n      return this.uuid;\n    };\n\n    this.onBeforeCompile = shader => {\n      if (parsedFragmentShader) {\n        const patchedFragmentShader = this.patchShader(parsedFragmentShader, shader.fragmentShader);\n        shader.fragmentShader = this.getMaterialDefine() + patchedFragmentShader;\n      }\n\n      if (parsedVertexShader) {\n        const patchedVertexShader = this.patchShader(parsedVertexShader, shader.vertexShader);\n        shader.vertexShader = '#define IS_VERTEX;\\n' + patchedVertexShader;\n        shader.vertexShader = this.getMaterialDefine() + shader.vertexShader;\n      }\n\n      shader.uniforms = { ...shader.uniforms,\n        ...this.uniforms\n      };\n      this.uniforms = shader.uniforms;\n    };\n\n    this.needsUpdate = true;\n  }\n\n  getMaterialDefine() {\n    return `#define IS_${this._type.toUpperCase()};\\n`;\n  }\n\n  getPatchMapForMaterial() {\n    switch (this._type) {\n      case 'ShaderMaterial':\n        return shaderMaterial_PatchMap;\n\n      default:\n        return defaultPatchMap;\n    }\n  }\n\n  patchShader(customShader, shader) {\n    let patchedShader = shader;\n    const patchMap = { ...this.getPatchMapForMaterial(),\n      ...this._customPatchMap\n    };\n    Object.keys(patchMap).forEach(name => {\n      Object.keys(patchMap[name]).forEach(key => {\n        if (isExactMatch(customShader.main, name)) {\n          patchedShader = replaceAll(patchedShader, key, patchMap[name][key]);\n        }\n      });\n    });\n    patchedShader = patchedShader.replace('void main() {', `\n          ${customShader.header}\n          void main() {\n            ${defaultDefinitions}\n            ${customShader.main}\n          `);\n    patchedShader = customShader.defines + patchedShader;\n    return patchedShader;\n  }\n\n  parseShader(shader) {\n    if (!shader) return; // Strip comments\n\n    const s = shader.replace(/\\/\\*\\*(.*?)\\*\\/|\\/\\/(.*?)\\n/gm, '');\n    const tokens = tokenize(s);\n    const funcs = tokenFunctions(tokens);\n    const mainIndex = funcs.map(e => {\n      return e.name;\n    }).indexOf('main');\n    const variables = stringify(tokens.slice(0, mainIndex >= 0 ? funcs[mainIndex].outer[0] : undefined));\n    const mainBody = mainIndex >= 0 ? this.getShaderFromIndex(tokens, funcs[mainIndex].body) : '';\n    return {\n      defines: '',\n      header: variables,\n      main: mainBody\n    };\n  }\n\n  getShaderFromIndex(tokens, index) {\n    return stringify(tokens.slice(index[0], index[1]));\n  }\n\n}\n\nexport { CustomShaderMaterial as default };\n"],
  "mappings": "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",
  "names": ["import_glsl_tokenizer", "import_glsl_token_string", "import_glsl_token_functions", "hash", "tokenize", "tokenFunctions", "stringify", "tokenize", "descope", "tokenFunctions", "stringify", "name", "React", "layers", "Color", "Texture"]
}
