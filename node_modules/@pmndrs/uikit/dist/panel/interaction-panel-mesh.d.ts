import { Intersection, Mesh, Sphere } from 'three';
import { ClippingRect } from '../clipping.js';
import { Signal } from '@preact/signals-core';
import { OrderInfo } from '../order.js';
import { Object3DRef } from '../context.js';
declare module 'three' {
    interface Object3D {
        spherecast?(sphere: Sphere, intersects: Array<Intersection>): void;
    }
}
export declare function makePanelSpherecast(mesh: Mesh): Exclude<Mesh['spherecast'], undefined>;
export declare function makePanelRaycast(mesh: Mesh): Mesh['raycast'];
export declare function makeClippedCast<T extends Mesh['raycast'] | Exclude<Mesh['spherecast'], undefined>>(mesh: Mesh, fn: T, rootObject: Object3DRef, clippingRect: Signal<ClippingRect | undefined> | undefined, orderInfo: Signal<OrderInfo | undefined>): (raycaster: Parameters<T>[0], intersects: Parameters<T>[1]) => void;
