import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useEffect, useMemo } from 'react';
import { Root } from './root.js';
import { batch, signal } from '@preact/signals-core';
import { createPortal, useStore, useThree } from '@react-three/fiber';
import { updateSizeFullscreen, } from '@pmndrs/uikit/internals';
export const Fullscreen = forwardRef((properties, ref) => {
    const store = useStore();
    const [sizeX, sizeY, pixelSize] = useMemo(() => [signal(1), signal(1), signal(1)], []);
    const camera = useThree((s) => s.camera);
    const distanceToCamera = properties.distanceToCamera ?? camera.near + 0.1;
    useEffect(() => {
        const fn = ({ camera, size: { height } }) => batch(() => updateSizeFullscreen(sizeX, sizeY, pixelSize, distanceToCamera, camera, height));
        fn(store.getState());
        return store.subscribe(fn);
    }, [pixelSize, sizeX, sizeY, store, distanceToCamera]);
    const attachCamera = properties.attachCamera ?? true;
    return (_jsxs(_Fragment, { children: [attachCamera && _jsx("primitive", { object: camera }), createPortal(_jsx("group", { "position-z": -distanceToCamera, children: _jsx(Root, { ref: ref, ...properties, sizeX: sizeX, sizeY: sizeY, pixelSize: pixelSize, children: properties.children }) }), camera)] }));
});
