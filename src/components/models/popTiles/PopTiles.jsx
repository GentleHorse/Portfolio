/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 ./public/models/pop-tiles/pop-tiles.glb 
*/

import React, { useRef, useLayoutEffect } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF, useAnimations, Image, useTexture } from "@react-three/drei";
import gsap from "gsap";
import * as THREE from "three";

import AmbienceOfLightThumbnail from "../../../../public/images/design-projects/__thumbnail-images/thumbnail-ambience-of-light.jpg";
import BeautyOfTimePassingThumbnail from "../../../../public/images/design-projects/__thumbnail-images/thumbnail-beauty-of-time-passing.jpg";
import InterventionInOurDisconnectionThumbnail from "../../../../public/images/design-projects/__thumbnail-images/thumbnail-intervention-in-our-disconnection.jpg";
import MasuTypoThumbnail from "../../../../public/images/design-projects/__thumbnail-images/thumbnail-masu-typo.jpg";
import ComfortingDinnerThumbnail from "../../../../public/images/design-projects/__thumbnail-images/thumbnail-comforting-dinner.jpg";

/**
 * INITIAL POP TILES PARAM VALUES
 */
const POPPING_DURATION = 0.45;
const STAYING_DURATION = 1.0;
const POPPING_HEIGHT = 2.25;

/**
 * LOAD NORMAL TEXTURES
 */
const loader = new THREE.TextureLoader();

const PLASTER_NORMAL_TEXTURE = loader.load(
  "./textures/plaster/plaster-normal.jpg"
);
const GLASS_FROSTED_NORMAL_TEXTURE = loader.load(
  "./textures/glass-frosted/glass-frosted-normal.jpg"
);
const WATER_NORMAL_TEXTURE = loader.load("./textures/water/water-normal.jpg");

const GLASS_MATERIAL = new THREE.MeshPhysicalMaterial({
  color: "#ffffff",
  roughness: 0.05,
  clearcoat: 0.25,
  transmission: 1,
  reflectivity: 0.5,
  thickness: 0.15,
  normalMap: PLASTER_NORMAL_TEXTURE,
});

export default function PopTiles({ scroll, ...props }) {
  /**
   * LOAD THE MODEL
   */
  const { nodes, materials } = useGLTF("./models/pop-tiles/pop-tiles.glb ");

  /**
   * LOAD PROJECTS THUMBNAILS
   */
  const ambienceOfLightTexture = useTexture(AmbienceOfLightThumbnail);
  ambienceOfLightTexture.flipY = false;

  const tl = useRef();
  const popTiles = useRef([]);

  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    if (popTiles.current.length === 11) {
      // 1. Ambience of Light
      tl.current.to(popTiles.current[0].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[0].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[0].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 2. Beauty of Time Passing
      tl.current.to(popTiles.current[1].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[1].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[1].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 3. Intervention In Our Disconnection
      tl.current.to(popTiles.current[2].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[2].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });

      tl.current.to(popTiles.current[2].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 4.
      tl.current.to(popTiles.current[3].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[3].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[3].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 5.
      tl.current.to(popTiles.current[4].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[4].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[4].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 6.
      tl.current.to(popTiles.current[5].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[5].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[5].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 7.
      tl.current.to(popTiles.current[6].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[6].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[6].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 8.
      tl.current.to(popTiles.current[7].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[7].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[7].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 9.
      tl.current.to(popTiles.current[8].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[8].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[8].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 10.
      tl.current.to(popTiles.current[9].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[9].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[9].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 11.
      tl.current.to(popTiles.current[10].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[10].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[10].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      tl.current.pause();
    }
  }, []);

  useFrame((state, delta) => {
    const scrollOffset = Math.max(0, scroll.offset);

    // Match the gsap duration to the scroll offset value
    tl.current.seek(scrollOffset * tl.current.duration());
  });

  return (
    <group {...props} dispose={null}>
      {/* 1. Ambience of Light */}
      <group ref={(element) => (popTiles.current[0] = element)}>
        <mesh
          geometry={nodes.Cube005.geometry}
          // material={materials["pop-tile-top.001"]}
        >
          <meshStandardMaterial
            color="#1C1C1C"
            roughness={0.25}
            metalness={0.85}
            envMapIntensity={0.15}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube005_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube005_2.geometry} material={GLASS_MATERIAL} />
        <mesh geometry={nodes["pop-title-001-image"].geometry}>
          <meshBasicMaterial map={ambienceOfLightTexture} toneMapped={false} />
        </mesh>
      </group>

      {/* 2. Beauty of Time Passing */}
      <group ref={(element) => (popTiles.current[1] = element)}>
        <mesh
          geometry={nodes.Cube023.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh
          geometry={nodes.Cube023_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube023_2.geometry} material={GLASS_MATERIAL} />
        <mesh
          geometry={nodes["pop-title-002-image"].geometry}
          material={nodes["pop-title-002-image"].material}
        />
      </group>

      {/* 3. Interevention in our Disconnection */}
      <group ref={(element) => (popTiles.current[2] = element)}>
        <mesh
          geometry={nodes.Cube029.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh
          geometry={nodes.Cube029_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube029_2.geometry} material={GLASS_MATERIAL} />
        <mesh
          geometry={nodes["pop-title-003-image"].geometry}
          material={nodes["pop-title-003-image"].material}
        />
      </group>

      {/* 4. Masu Typo */}
      <group ref={(element) => (popTiles.current[3] = element)}>
        <mesh
          geometry={nodes.Cube035.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh
          geometry={nodes.Cube035_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube035_2.geometry} material={GLASS_MATERIAL} />
        <mesh
          geometry={nodes["pop-title-004-image"].geometry}
          material={nodes["pop-title-004-image"].material}
        />
      </group>

      {/* 5. Comforting Dinner */}
      <group ref={(element) => (popTiles.current[4] = element)}>
        <mesh
          geometry={nodes.Cube041.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh
          geometry={nodes.Cube041_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube041_2.geometry} material={GLASS_MATERIAL} />
        <mesh
          geometry={nodes["pop-title-005-image"].geometry}
          material={nodes["pop-title-005-image"].material}
        />
      </group>

      {/* 6. 3D Visuals */}
      <group ref={(element) => (popTiles.current[5] = element)}>
        <mesh
          geometry={nodes.Cube047.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh
          geometry={nodes.Cube047_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube047_2.geometry} material={GLASS_MATERIAL} />
        <mesh
          geometry={nodes["pop-title-006-image"].geometry}
          material={nodes["pop-title-006-image"].material}
        />
      </group>

      {/* 7. Portfolio Website */}
      <group ref={(element) => (popTiles.current[6] = element)}>
        <mesh
          geometry={nodes.Cube053.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh
          geometry={nodes.Cube053_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube053_2.geometry} material={GLASS_MATERIAL} />
        <mesh
          geometry={nodes["pop-title-007-image"].geometry}
          material={nodes["pop-title-007-image"].material}
        />
      </group>

      {/* 8. OBJECT Rotterdam 2024 */}
      <group ref={(element) => (popTiles.current[7] = element)}>
        <mesh
          geometry={nodes.Cube059.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh
          geometry={nodes.Cube059_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube059_2.geometry} material={GLASS_MATERIAL} />
        <mesh
          geometry={nodes["pop-title-008-image"].geometry}
          material={nodes["pop-title-008-image"].material}
        />
      </group>

      {/* 9. Weather Cereal */}
      <group ref={(element) => (popTiles.current[8] = element)}>
        <mesh
          geometry={nodes.Cube065.geometry}
          material={materials["pop-tile-top.001"]}
        />

        <mesh
          geometry={nodes.Cube065_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube065_2.geometry} material={GLASS_MATERIAL} />
        <mesh
          geometry={nodes["pop-title-009-image"].geometry}
          material={nodes["pop-title-009-image"].material}
        />
      </group>

      {/* 10. Donuts Universe */}
      <group ref={(element) => (popTiles.current[9] = element)}>
        <mesh
          geometry={nodes.Cube071.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh
          geometry={nodes.Cube071_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube071_2.geometry} material={GLASS_MATERIAL} />
        <mesh
          geometry={nodes["pop-title-010-image"].geometry}
          material={nodes["pop-title-010-image"].material}
        />
      </group>

      {/* 11. Marble's on a Roll */}
      <group ref={(element) => (popTiles.current[10] = element)}>
        <mesh
          geometry={nodes.Cube077.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh
          geometry={nodes.Cube077_1.geometry}
          material={materials["pop-tile-hanging-wires"]}
        />
        <mesh geometry={nodes.Cube077_2.geometry} material={GLASS_MATERIAL} />
        <mesh
          geometry={nodes["pop-title-011-image"].geometry}
          material={nodes["pop-title-011-image"].material}
        />
      </group>

      {/* GROUND */}
      <mesh
        geometry={nodes.Cube016.geometry}
        material={materials["pop-tile-ground"]}
      />
      <mesh
        geometry={nodes.Cube016_1.geometry}
        material={materials["pop-tile-emission-hole"]}
      />
    </group>
  );
}

useGLTF.preload("./models/pop-tiles/pop-tiles.glb ");
