/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 ./public/models/pop-tiles/pop-tiles.glb 
*/

import React, { useRef, useState, useEffect, useLayoutEffect } from "react";
import { useFrame } from "@react-three/fiber";
import {
  useGLTF,
  useAnimations,
  Image,
  useTexture,
  Text,
} from "@react-three/drei";
import gsap from "gsap";
import * as THREE from "three";

import AmbienceOfLightThumbnail from "../../../../public/images/design-projects/__thumbnail-images/thumbnail-ambience-of-light.jpg";
import BeautyOfTimePassingThumbnail from "../../../../public/images/design-projects/__thumbnail-images/thumbnail-beauty-of-time-passing.jpg";
import InterventionInOurDisconnectionThumbnail from "../../../../public/images/design-projects/__thumbnail-images/thumbnail-intervention-in-our-disconnection.jpg";
import MasuTypoThumbnail from "../../../../public/images/design-projects/__thumbnail-images/thumbnail-masu-typo.jpg";
import ComfortingDinnerThumbnail from "../../../../public/images/design-projects/__thumbnail-images/thumbnail-comforting-dinner.jpg";
import ThreeDVisualThumbnail from "../../../../public/images/app-developments/__thumbnail-images/thumbnail-3-d-visuals.jpg";
import PortfolioWebsiteThumbnail from "../../../../public/images/app-developments/__thumbnail-images/thumbnail-portfolio-website.jpg";
import OBJECRotterdam2024Thumbnail from "../../../../public/images/app-developments/__thumbnail-images/thumbnail-object-rotterdam-2024.jpg";
import WeatherCerealThumbnail from "../../../../public/images/app-developments/__thumbnail-images/thumbnail-weather-cereal.jpg";
import DonutsUniverseThumbnail from "../../../../public/images/app-developments/__thumbnail-images/thumbnail-donuts-universe.jpg";
import MarbleOnARollThumbnail from "../../../../public/images/app-developments/__thumbnail-images/thumbnail-marble-on-a-roll.jpg";

/**
 * INITIAL POP TILES PARAM VALUES
 */
const POPPING_DURATION = 0.45;
const STAYING_DURATION = 1.0;
const POPPING_HEIGHT = 2.25;

/**
 * LOAD NORMAL TEXTURES
 */
const loader = new THREE.TextureLoader();

// TEXTURE - GLASS CASE
const WATER_NORMAL_TEXTURE = loader.load("./textures/water/water-normal.jpg");

// TEXTURE - TILE TOP
const METAL_ROUGHNESS_TEXTURE = loader.load(
  "./textures/metal/Metal_006_roughness.jpg"
);
const METAL_NORMAL_TEXTURE = loader.load(
  "./textures/metal/Metal_006_normal.jpg"
);
const METAL_METALNESS_TEXTURE = loader.load(
  "./textures/metal/Metal_006_metallic.jpg"
);

/**
 * MATERIAL - GLASS CASE
 */
const GLASS_MATERIAL = new THREE.MeshPhysicalMaterial({
  color: "#ffffff",
  roughness: 0.05,
  clearcoat: 0.75,
  transmission: 1,
  reflectivity: 0.8,
  thickness: 0.15,
  normalMap: WATER_NORMAL_TEXTURE,
});

export default function PopTiles({ scroll, projectListArray, ...props }) {
  /**
   * MOUSE POINTER MOVE SETTING
   */
  const mouse = new THREE.Vector2();

  useEffect(() => {
    window.addEventListener("pointermove", (event) => {
      if (event.isPrimary === false) return;

      // Scale half window side into 1% for mouse movements
      mouse.x = (event.clientX - window.innerWidth / 2) * 0.02;
      mouse.y = (event.clientY - window.innerHeight / 2) * 0.02;
    });
  }, []);

  /**
   * MOUSE POINTER SET UP ON HOVER STATE
   */
  const [hovered, setHovered] = useState(false);

  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);

  /**
   * LOAD THE MODEL
   */
  const { nodes, materials } = useGLTF("./models/pop-tiles/pop-tiles.glb ");

  /**
   * LOAD PROJECTS THUMBNAILS
   */
  const ambienceOfLightTexture = useTexture(AmbienceOfLightThumbnail);
  ambienceOfLightTexture.flipY = false;
  const beautyOfTimePassingTexture = useTexture(BeautyOfTimePassingThumbnail);
  beautyOfTimePassingTexture.flipY = false;
  const interventionInOurDisconnectionTexture = useTexture(
    InterventionInOurDisconnectionThumbnail
  );
  interventionInOurDisconnectionTexture.flipY = false;
  const masuTypoTexture = useTexture(MasuTypoThumbnail);
  masuTypoTexture.flipY = false;
  const comfortingDinnerTexture = useTexture(ComfortingDinnerThumbnail);
  comfortingDinnerTexture.flipY = false;
  const threeDVisualTexture = useTexture(ThreeDVisualThumbnail);
  threeDVisualTexture.flipY = false;
  const portfolioWebsiteTexture = useTexture(PortfolioWebsiteThumbnail);
  portfolioWebsiteTexture.flipY = false;
  const objectRotterdamTexture = useTexture(OBJECRotterdam2024Thumbnail);
  objectRotterdamTexture.flipY = false;
  const weatherCerealTexture = useTexture(WeatherCerealThumbnail);
  weatherCerealTexture.flipY = false;
  const donutsUniverseTexture = useTexture(DonutsUniverseThumbnail);
  donutsUniverseTexture.flipY = false;
  const marbleOnARollTexture = useTexture(MarbleOnARollThumbnail);
  marbleOnARollTexture.flipY = false;

  /**
   * ANIMATION - TILE POPS UP WITH SCROLLING
   */
  const tl = useRef();
  const popTiles = useRef([]);

  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    if (popTiles.current.length === 11) {
      // 1. Ambience of Light
      tl.current.to(popTiles.current[0].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[0].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[0].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 2. Beauty of Time Passing
      tl.current.to(popTiles.current[1].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[1].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[1].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 3. Intervention In Our Disconnection
      tl.current.to(popTiles.current[2].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[2].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });

      tl.current.to(popTiles.current[2].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 4.
      tl.current.to(popTiles.current[3].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[3].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[3].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 5.
      tl.current.to(popTiles.current[4].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[4].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[4].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 6.
      tl.current.to(popTiles.current[5].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[5].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[5].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 7.
      tl.current.to(popTiles.current[6].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[6].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[6].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 8.
      tl.current.to(popTiles.current[7].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[7].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[7].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 9.
      tl.current.to(popTiles.current[8].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[8].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[8].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 10.
      tl.current.to(popTiles.current[9].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[9].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[9].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 11.
      tl.current.to(popTiles.current[10].position, {
        duration: POPPING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[10].position, {
        duration: STAYING_DURATION,
        y: POPPING_HEIGHT,
      });
      tl.current.to(popTiles.current[10].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      tl.current.pause();
    }
  }, []);

  /**
   * ANIMATION EXECUTION
   */
  useFrame((state, delta) => {
    const scrollOffset = Math.max(0, scroll.offset);

    // Match the gsap duration to the scroll offset value
    tl.current.seek(scrollOffset * tl.current.duration());
  });

  const projectThumbnailImagesDist = 0.334;
  return (
    <group {...props} dispose={null}>
      {/* 1. Ambience of Light */}
      <group ref={(element) => (popTiles.current[0] = element)}>
        <mesh geometry={nodes.Cube005.geometry}>
          <meshStandardMaterial
            color="#1C1C1C"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh geometry={nodes.Cube005_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube005_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-001-image"].geometry}>
          <meshBasicMaterial map={ambienceOfLightTexture} toneMapped={false} />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[0].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* 2. Beauty of Time Passing */}
      <group ref={(element) => (popTiles.current[1] = element)}>
        <mesh
          geometry={nodes.Cube023.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh geometry={nodes.Cube023_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube023_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-002-image"].geometry}>
          <meshBasicMaterial
            map={beautyOfTimePassingTexture}
            toneMapped={false}
          />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1 - projectThumbnailImagesDist * 1]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[1].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* 3. Interevention in our Disconnection */}
      <group ref={(element) => (popTiles.current[2] = element)}>
        <mesh
          geometry={nodes.Cube029.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh geometry={nodes.Cube029_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube029_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-003-image"].geometry}>
          <meshBasicMaterial
            map={interventionInOurDisconnectionTexture}
            toneMapped={false}
          />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1 - projectThumbnailImagesDist * 2]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[2].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* 4. Masu Typo */}
      <group ref={(element) => (popTiles.current[3] = element)}>
        <mesh
          geometry={nodes.Cube035.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh geometry={nodes.Cube035_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube035_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-004-image"].geometry}>
          <meshBasicMaterial map={masuTypoTexture} toneMapped={false} />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1 - projectThumbnailImagesDist * 3]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[3].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* 5. Comforting Dinner */}
      <group ref={(element) => (popTiles.current[4] = element)}>
        <mesh
          geometry={nodes.Cube041.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh geometry={nodes.Cube041_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube041_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-005-image"].geometry}>
          <meshBasicMaterial map={comfortingDinnerTexture} toneMapped={false} />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1 - projectThumbnailImagesDist * 4]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[4].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* 6. 3D Visuals */}
      <group ref={(element) => (popTiles.current[5] = element)}>
        <mesh
          geometry={nodes.Cube047.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh geometry={nodes.Cube047_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube047_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-006-image"].geometry}>
          <meshBasicMaterial map={threeDVisualTexture} toneMapped={false} />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1 - projectThumbnailImagesDist * 5]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[5].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* 7. Portfolio Website */}
      <group ref={(element) => (popTiles.current[6] = element)}>
        <mesh
          geometry={nodes.Cube053.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh geometry={nodes.Cube053_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube053_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-007-image"].geometry}>
          <meshBasicMaterial map={portfolioWebsiteTexture} toneMapped={false} />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1 - projectThumbnailImagesDist * 6]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[6].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* 8. OBJECT Rotterdam 2024 */}
      <group ref={(element) => (popTiles.current[7] = element)}>
        <mesh
          geometry={nodes.Cube059.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh geometry={nodes.Cube059_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube059_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-008-image"].geometry}>
          <meshBasicMaterial map={objectRotterdamTexture} toneMapped={false} />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1 - projectThumbnailImagesDist * 7]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[7].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* 9. Weather Cereal */}
      <group ref={(element) => (popTiles.current[8] = element)}>
        <mesh
          geometry={nodes.Cube065.geometry}
          material={materials["pop-tile-top.001"]}
        />

        <mesh geometry={nodes.Cube065_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube065_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-009-image"].geometry}>
          <meshBasicMaterial map={weatherCerealTexture} toneMapped={false} />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1 - projectThumbnailImagesDist * 8]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[8].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* 10. Donuts Universe */}
      <group ref={(element) => (popTiles.current[9] = element)}>
        <mesh
          geometry={nodes.Cube071.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh geometry={nodes.Cube071_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube071_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-010-image"].geometry}>
          <meshBasicMaterial map={donutsUniverseTexture} toneMapped={false} />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1 - projectThumbnailImagesDist * 9]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[9].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* 11. Marble's on a Roll */}
      <group ref={(element) => (popTiles.current[10] = element)}>
        <mesh
          geometry={nodes.Cube077.geometry}
          material={materials["pop-tile-top.001"]}
        />
        <mesh geometry={nodes.Cube077_1.geometry}>
          <meshStandardMaterial
            color="#856A00"
            roughnessMap={METAL_ROUGHNESS_TEXTURE}
            normalMap={METAL_NORMAL_TEXTURE}
            metalnessMap={METAL_METALNESS_TEXTURE}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube077_2.geometry}
          material={GLASS_MATERIAL}
          onPointerOver={(event) => {
            event.stopPropagation();
            setHovered(true);
          }}
          onPointerOut={() => setHovered(false)}
        />
        <mesh geometry={nodes["pop-title-011-image"].geometry}>
          <meshBasicMaterial map={marbleOnARollTexture} toneMapped={false} />
        </mesh>
        <Text
          position={[0.8, -1.5, 0.1 - projectThumbnailImagesDist * 10]}
          fontSize={0.125}
          font="./fonts/DMSerifDisplay-Regular.ttf"
          maxWidth={2.0}
          anchorX="right"
        >
          {projectListArray[10].title}
          <meshBasicMaterial color="#ffffff" toneMapped={false} />
        </Text>
      </group>

      {/* GROUND */}
      <mesh geometry={nodes.Cube016.geometry}>
        <meshStandardMaterial color="#1C1C1C" roughness={0.25} />
      </mesh>
      <mesh
        geometry={nodes.Cube016_1.geometry}
        material={materials["pop-tile-emission-hole"]}
      />
    </group>
  );
}

useGLTF.preload("./models/pop-tiles/pop-tiles.glb ");
