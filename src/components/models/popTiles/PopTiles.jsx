/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 ./public/models/pop-tiles/pop-tiles.glb 
*/

import React, { useRef, useLayoutEffect } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import gsap from "gsap";

/**
 * INITIAL POP TILES PARAM VALUES
 */
const POPPING_DURATION = 0.75;
const STAYING_DURATION = 1.0;

export default function PopTiles({ scroll, ...props }) {
  const { nodes, materials } = useGLTF("./models/pop-tiles/pop-tiles.glb ");

  const tl = useRef();
  const popTiles = useRef([]);

  useLayoutEffect(() => {
    tl.current = gsap.timeline(); 

    if (popTiles.current.length === 11) {
      // 1. Ambience of Light
      tl.current.to(popTiles.current[0].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[0].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[0].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 2. Beauty of Time Passing
      tl.current.to(popTiles.current[1].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[1].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[1].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 3. Intervention In Our Disconnection
      tl.current.to(popTiles.current[2].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[2].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      
      tl.current.to(popTiles.current[2].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 4.
      tl.current.to(popTiles.current[3].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[3].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[3].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 5.
      tl.current.to(popTiles.current[4].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[4].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[4].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 6.
      tl.current.to(popTiles.current[5].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[5].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[5].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 7.
      tl.current.to(popTiles.current[6].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[6].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[6].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 8.
      tl.current.to(popTiles.current[7].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[7].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[7].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 9.
      tl.current.to(popTiles.current[8].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[8].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[8].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 10.
      tl.current.to(popTiles.current[9].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[9].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[9].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      // 11.
      tl.current.to(popTiles.current[10].position, {
        duration: POPPING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[10].position, {
        duration: STAYING_DURATION,
        y: 2.5,
      });
      tl.current.to(popTiles.current[10].position, {
        duration: POPPING_DURATION,
        y: 0.0,
      });

      tl.current.pause();
    }
  }, []);

  useFrame((state, delta) => {
    const scrollOffset = Math.max(0, scroll.offset);

    // Match the gsap duration to the scroll offset value
    tl.current.seek(scrollOffset * tl.current.duration());
  });

  

  return (
    <group {...props} dispose={null}>
      <group name="Scene">
        <mesh
          ref={(element) => (popTiles.current[0] = element)}
          name="pop-title-001"
          geometry={nodes["pop-title-001"].geometry}
          material={nodes["pop-title-001"].material}
        />
        <mesh
          ref={(element) => (popTiles.current[1] = element)}
          name="pop-title-002"
          geometry={nodes["pop-title-002"].geometry}
          material={nodes["pop-title-002"].material}
        />
        <mesh
          ref={(element) => (popTiles.current[2] = element)}
          name="pop-title-003"
          geometry={nodes["pop-title-003"].geometry}
          material={nodes["pop-title-003"].material}
        />
        <mesh
          ref={(element) => (popTiles.current[3] = element)}
          name="pop-title-004"
          geometry={nodes["pop-title-004"].geometry}
          material={nodes["pop-title-004"].material}
        />
        <mesh
          ref={(element) => (popTiles.current[4] = element)}
          name="pop-title-005"
          geometry={nodes["pop-title-005"].geometry}
          material={nodes["pop-title-005"].material}
        />
        <mesh
          ref={(element) => (popTiles.current[5] = element)}
          name="pop-title-006"
          geometry={nodes["pop-title-006"].geometry}
          material={nodes["pop-title-006"].material}
        />
        <mesh
          ref={(element) => (popTiles.current[6] = element)}
          name="pop-title-007"
          geometry={nodes["pop-title-007"].geometry}
          material={nodes["pop-title-007"].material}
        />
        <mesh
          ref={(element) => (popTiles.current[7] = element)}
          name="pop-title-008"
          geometry={nodes["pop-title-008"].geometry}
          material={nodes["pop-title-008"].material}
        />
        <mesh
          ref={(element) => (popTiles.current[8] = element)}
          name="pop-title-009"
          geometry={nodes["pop-title-009"].geometry}
          material={nodes["pop-title-009"].material}
        />
        <mesh
          ref={(element) => (popTiles.current[9] = element)}
          name="pop-title-010"
          geometry={nodes["pop-title-010"].geometry}
          material={nodes["pop-title-010"].material}
        />
        <mesh
          ref={(element) => (popTiles.current[10] = element)}
          name="pop-title-011"
          geometry={nodes["pop-title-011"].geometry}
          material={nodes["pop-title-011"].material}
        />
        <group name="pop-tile-ground">
          <mesh
            name="Cube016"
            geometry={nodes.Cube016.geometry}
            material={nodes.Cube016.material}
          />
          <mesh
            name="Cube016_1"
            geometry={nodes.Cube016_1.geometry}
            material={nodes.Cube016_1.material}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("./models/pop-tiles/pop-tiles.glb ");
