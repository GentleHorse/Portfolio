/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 ./public/models/glass-lens-objects/glass-lens-objects.glb 
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { easing } from "maath";

export default function GlassLens({ material, objectIndex, ...props }) {
  /**
   * IMPORT GLB MODEL
   */
  const { nodes } = useGLTF(
    "./models/glass-lens-objects/glass-lens-objects.glb"
  );

  /**
   * LENS REF
   */
  const lens = useRef();

  /**
   * POINTER FALLOWING ANIMATION
   */
  useFrame((state, delta) => {
    // Tie lens to the pointer
    // getCurrentViewport gives us the width & height that would fill the screen in threejs units
    // By giving it a target coordinate we can offset these bounds, for instance width/height for a plane that
    // sits 15 units from 0/0/0 towards the camera (which is where the lens is)
    const viewport = state.viewport.getCurrentViewport(state.camera, [0, 0, 0]);
    easing.damp3(
      lens.current.position,
      [
        (state.pointer.x * viewport.width) / 2,
        (state.pointer.y * viewport.height) / 2,
        0,
      ],
      0.15,
      delta
    );
  });

  return (
    <group ref={lens} rotation-y={Math.PI} scale={1.5} {...props} dispose={null}>
      <mesh geometry={nodes.icoSphere.geometry} visible={objectIndex === 1}>
        {material}
      </mesh>
      <mesh geometry={nodes.uvSphere.geometry} visible={objectIndex === 2}>
        {material}
      </mesh>
      <mesh
        geometry={nodes.virticalStripesBig.geometry}
        visible={objectIndex === 3}
      >
        {material}
      </mesh>
      <mesh geometry={nodes.hexagon.geometry} visible={objectIndex === 4}>
        {material}
      </mesh>
    </group>
  );
}

useGLTF.preload("./models/glass-lens-objects/glass-lens-objects.glb");
